schema {
  query: Query
}
type Query {
  """
  One specific user.
  """
  user(
    """
    The identifier of the user to retrieve. To retrieve the authenticated user, use `viewer` query.
    """
    id: String!
  ): User!
}
"""
A user that has access to the the resources of an organization.
"""
type User implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The settings of the user.
  """
  settings: UserSettings!
  """
  Issues assigned to the user.
  """
  assignedIssues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
}
interface Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
}
"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime
"""
The settings of a user as a JSON object.
"""
type UserSettings implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The notification channel settings the user has selected.
  """
  notificationPreferences: JSONObject!
  """
  The email types the user has unsubscribed from.
  """
  unsubscribedFrom: [String!]!
  """
  The user to whom this notification was targeted for.
  """
  user: User!
}
"""
The `JSONObject` scalar type represents JSON values as a string
"""
scalar JSONObject
"""
By which field should the pagination order by
"""
enum PaginationOrderBy {
  createdAt
  updatedAt
}
type IssueConnection {
  edges: [IssueEdge!]!
  nodes: [Issue!]!
  pageInfo: PageInfo!
}
type IssueEdge {
  node: Issue!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
An issue.
"""
type Issue implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The user to whom the issue is assigned to.
  """
  assignee: User
}
"""
The `JSON` scalar type represents JSON values
"""
scalar JSON
"""
The `TimelessDateScalar` scalar type represents Date values without a timestamp. It expects strings in the format YYYY-MM-DD
"""
scalar TimelessDateScalar
type PageInfo {
  """
  Indicates if there are more results when paginating backward.
  """
  hasPreviousPage: Boolean!
}
