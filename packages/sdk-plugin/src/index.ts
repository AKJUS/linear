import { PluginFunction, PluginValidateFn, Types } from "@graphql-codegen/plugin-helpers";
import { DocumentMode } from "@graphql-codegen/visitor-plugin-common";
import { filterJoin, logger, nonNullable } from "@linear/common";
import { GraphQLSchema } from "graphql";
import { extname } from "path";
import { printApiDefinition } from "./api";
import c from "./constants";
import { getApiDefinitions } from "./documents";
import { printRequesterType } from "./requester";
import { RawSdkPluginConfig } from "./types";

/**
 * Graphql-codegen plugin for outputting the typed Linear sdk
 */
export const plugin: PluginFunction<RawSdkPluginConfig> = async (
  schema: GraphQLSchema,
  documents: Types.DocumentFile[],
  config: RawSdkPluginConfig
) => {
  try {
    /** Process a list of documents to add information for chaining the api operations */
    logger.info("Processing documents");

    const apiDefinitions = getApiDefinitions(documents);
    logger.debug(apiDefinitions);

    const printedDefinitions = Object.entries(apiDefinitions).map(([apiKey, definitions]) => {
      logger.info("Generating api", apiKey);

      return printApiDefinition({ config, apiDefinitions, apiPath: apiKey.split("_"), definitions });
    });

    logger.info("Printing api");
    return {
      /** Add any initial imports */
      prepend: [
        /** Ignore unused variables */
        "/* eslint-disable @typescript-eslint/no-unused-vars */",
        /** Import DocumentNode if required */
        config.documentMode !== DocumentMode.string ? `import { DocumentNode } from 'graphql'` : undefined,
        /** Import ResultOf util for document return types */
        `import { ResultOf } from '@graphql-typed-document-node/core'`,
      ].filter(nonNullable),
      content: filterJoin(
        [
          /** Import and export documents */
          `import * as ${c.NAMESPACE_DOCUMENT} from '${config.documentFile}'`,
          `export * from '${config.documentFile}'\n`,
          /** Print the requester function */
          ...printRequesterType(config),
          // /** Print the definitions */
          ...printedDefinitions,
        ],
        "\n"
      ),
    };
  } catch (e) {
    logger.fatal(e);
    throw e;
  }
};

/**
 * Validate use of the plugin
 */
export const validate: PluginValidateFn = async (
  schema: GraphQLSchema,
  documents: Types.DocumentFile[],
  config: RawSdkPluginConfig,
  outputFile: string
) => {
  const packageName = "@linear/sdk-plugin";
  logger.info(`Validating ${packageName}`);
  logger.debug({ config });

  const prefix = `Plugin "${packageName}" config requires`;

  if (extname(outputFile) !== ".ts") {
    throw new Error(`${prefix} output file extension to be ".ts" but is "${outputFile}"`);
  }

  if (!config.documentFile || typeof config.documentFile !== "string") {
    throw new Error(`${prefix} documentFile to be a string path to a document file generated by "typed-document-node"`);
  }
};
