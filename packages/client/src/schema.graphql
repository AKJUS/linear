schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}
type Query {
  """
  One specific user.
  """
  user(
    """
    The identifier of the user to retrieve. To retrieve the authenticated user, use `viewer` query.
    """
    id: String!
  ): User!
  """
  The currently authenticated user.
  """
  viewer: User!
  """
  The user's organization.
  """
  organization: Organization!
  """
  Does the organization exist.
  """
  organizationExists(urlKey: String!): OrganizationExistsPayload!
  """
  Fetch data to catch up the client to the state of the world.
  """
  syncBootstrap(
    """
    The version of the backend database the client has locally stored.
    """
    databaseVersion: Int!
    """
    The last sync id the client has seen.
    """
    sinceSyncId: Int!
  ): SyncResponse!
  """
  Fetches delta packets to catch up the user to the current state of the world.
  """
  syncUpdates(
    """
    The last sync id the client has seen.
    """
    sinceSyncId: Float!
  ): SyncResponse!
  """
  Fetches an archived model.
  """
  archivedModelSync(
    """
    The identifier of the model to load. What an identifier is specific to the model class.
    """
    identifier: String!
    """
    The class name of the model to load.
    """
    modelClass: String!
  ): ArchiveResponse!
  """
  Fetches archived models.
  """
  archivedModelsSync(
    """
    The class name of the models to load.
    """
    modelClass: String!
    """
    The teamId for which to load archived models.
    """
    teamId: String!
    """
    Retrieve issues that have been archived before this date.
    """
    before: DateTime
    """
    The number of issues to load.
    """
    last: Int
  ): ArchiveResponse!
  """
  Finds a user account by email or identifier. Super user required.
  """
  adminUserAccountLookup(
    """
    Email by which to search for the user account.
    """
    email: String
    """
    The identifier by which to search for the user account.
    """
    id: String
  ): UserAccountAdminPrivileged!
  """
  All users of the organization.
  """
  users(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  All API keys for the user.
  """
  apiKeys(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ApiKeyConnection!
  """
  Get information for an application.
  """
  application(
    """
    Redirect URI for the application.
    """
    redirectUri: String
    """
    The client ID of the application.
    """
    clientId: String!
  ): Application!
  """
  Get all authorized applications for a user
  """
  authorizedApplications: [Application!]!
  """
  Fetch users belonging to this user account.
  """
  availableUsers: AuthResolverResponse!
  """
  Fetch SSO login URL for the email provided.
  """
  ssoUrlFromEmail(
    """
    Whether the client is the desktop app.
    """
    isDesktop: Boolean
    """
    Email to query the SSO login URL by.
    """
    email: String!
  ): SsoUrlFromEmailResponse!
  """
  Billing details for the customer.
  """
  billingDetails: BillingDetailsPayload!
  """
  Join collaborative document and get missing steps.
  """
  collaborativeDocumentJoin(
    """
    The identifier of the client.
    """
    clientId: String!
    """
    The identifier of the Issue to join.
    """
    issueId: String!
    """
    Document version.
    """
    version: Int!
  ): CollaborationDocumentUpdatePayload!
  """
  A specific comment.
  """
  comment(
    """
    The identifier of the comment to retrieve.
    """
    id: String!
  ): Comment!
  comments(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  One specific custom view.
  """
  customView(id: String!): CustomView!
  customViews(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CustomViewConnection!
  """
  One specific cycle.
  """
  cycle(id: String!): Cycle!
  """
  All cycles.
  """
  cycles(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!
  """
  A specific emoji.
  """
  emoji(
    """
    The identifier of the emoji to retrieve.
    """
    id: String!
  ): Emoji!
  emojis(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): EmojiConnection!
  """
  One specific favorite.
  """
  favorite(id: String!): Favorite!
  """
  The user's favorites.
  """
  favorites(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): FavoriteConnection!
  """
  Fetch Figma screenshot and other information with file and node identifiers.
  """
  figmaEmbedInfo(
    """
    Figma node identifier.
    """
    nodeId: String
    """
    Figma file identifier.
    """
    fileId: String!
  ): FigmaEmbedPayload!
  """
  One specific integration.
  """
  integration(id: String!): Integration!
  """
  All integrations.
  """
  integrations(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!
  """
  One specific integration resource. (e.g. linked GitHub pull requests for an issue)
  """
  integrationResource(id: String!): IntegrationResource!
  """
  All integrations resources (e.g. linked GitHub pull requests for issues).
  """
  integrationResources(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationResourceConnection!
  """
  Retrieves information for the public invite page.
  """
  inviteInfo(
    """
    Team hash.
    """
    teamHash: String
    """
    User hash.
    """
    userHash: String!
  ): InvitePagePayload!
  """
  One specific label.
  """
  issueLabel(id: String!): IssueLabel!
  """
  All labels.
  """
  issueLabels(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  One specific issue relation.
  """
  issueRelation(id: String!): IssueRelation!
  issueRelations(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  One specific issue.
  """
  issue(id: String!): Issue!
  """
  [ALPHA] Search issues. This query is experimental and is subject to change without notice.
  """
  issueSearch(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
    """
    Search string to look for.
    """
    query: String!
  ): IssueConnection!
  issues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  One specific milestone.
  """
  milestone(id: String!): Milestone!
  """
  All milestones.
  """
  milestones(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): MilestoneConnection!
  """
  The user's settings.
  """
  notification: UserSettings!
  """
  All notifications.
  """
  notifications(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationConnection!
  """
  The user's notification subscriptions.
  """
  notificationSubscription(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): NotificationSubscriptionConnection!
  """
  One specific organization invite.
  """
  organizationInvite(id: String!): IssueLabel!
  """
  All invites for the organization.
  """
  organizationInvites(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): OrganizationInviteConnection!
  """
  One specific project link.
  """
  projectLink(id: String!): ProjectLink!
  """
  All links for the project.
  """
  ProjectLinks(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!
  """
  One specific project.
  """
  project(id: String!): Project!
  """
  All projects.
  """
  projects(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  Sends a test push message.
  """
  pushSubscriptionTest: PushSubscriptionPayload!
  """
  A specific reaction.
  """
  reaction(
    """
    The identifier to retrieve.
    """
    id: String!
  ): Reaction!
  reactions(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ReactionConnection!
  """
  The organization's subscription.
  """
  subscription: Subscription!
  """
  One specific team membership.
  """
  teamMembership(id: String!): TeamMembership!
  """
  All team memberships.
  """
  teamMemberships(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  One specific team.
  """
  team(id: String!): Team!
  """
  All teams.
  """
  teams(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  All templates from all users.
  """
  templates: [Template!]!
  """
  A specific template.
  """
  template(
    """
    The identifier of the template to retrieve.
    """
    id: String!
  ): Template!
  """
  All view preferences.
  """
  viewPreferences(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ViewPreferencesConnection!
  """
  A specific webhook.
  """
  webhook(
    """
    The identifier of the webhook to retrieve.
    """
    id: String!
  ): Webhook!
  """
  All webhooks.
  """
  webhooks(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!
  """
  One specific state.
  """
  workflowState(id: String!): WorkflowState!
  """
  All states.
  """
  workflowStates(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!
}
"""
A user that has access to the the resources of an organization.
"""
type User implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The user's full name.
  """
  name: String!
  """
  The user's display (nick) name. Unique within each organization.
  """
  displayName: String!
  """
  The user's email address.
  """
  email: String!
  """
  An URL to the user's avatar image.
  """
  avatarUrl: String
  """
  Reason why is the account disabled.
  """
  disableReason: String!
  """
  Unique hash for the user to be used in invite URLs.
  """
  inviteHash: String!
  userAccountId: String!
  """
  The settings of the user.
  """
  settings: UserSettings!
  """
  The last time the user was seen online. If null, the user is currently online.
  """
  lastSeen: DateTime
  """
  Whether the user is an organization administrator.
  """
  admin: Boolean!
  """
  Whether the user account is active or disabled.
  """
  active: Boolean!
  """
  Issues assigned to the user.
  """
  assignedIssues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Issues created by the user.
  """
  createdIssues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Organization in which the user belongs to.
  """
  organization: Organization!
  """
  Number of issues created.
  """
  createdIssueCount: Int!
  """
  Memberships associated with the user.
  """
  teamMemberships(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
}
interface Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
}
"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime
"""
The settings of a user as a JSON object.
"""
type UserSettings implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The notification channel settings the user has selected.
  """
  notificationPreferences: JSONObject!
  """
  The email types the user has unsubscribed from.
  """
  unsubscribedFrom: [String!]!
  """
  The user to whom this notification was targeted for.
  """
  user: User!
}
"""
The `JSONObject` scalar type represents JSON values as a string
"""
scalar JSONObject
"""
By which field should the pagination order by
"""
enum PaginationOrderBy {
  createdAt
  updatedAt
}
type IssueConnection {
  edges: [IssueEdge!]!
  nodes: [Issue!]!
  pageInfo: PageInfo!
}
type IssueEdge {
  node: Issue!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
An issue.
"""
type Issue implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The issue's unique number.
  """
  number: Float!
  """
  The issue's title.
  """
  title: String!
  """
  The issue's description in markdown format.
  """
  description: String
  """
  The issue's description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The priority of the issue.
  """
  priority: Float!
  """
  The estimate of the complexity of the issue..
  """
  estimate: Float
  """
  The order of the item in its column on the board.
  """
  boardOrder: Float!
  """
  The time at which the issue was moved into started state.
  """
  startedAt: DateTime
  """
  The time at which the issue was moved into completed state.
  """
  completedAt: DateTime
  """
  The time at which the issue was moved into canceled state.
  """
  canceledAt: DateTime
  """
  The time at which the issue was automatically closed by the auto pruning process.
  """
  autoClosedAt: DateTime
  """
  The time at which the issue was automatically archived by the auto pruning process.
  """
  autoArchivedAt: DateTime
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDateScalar
  """
  Previous identifiers of the issue if it has been moved between teams.
  """
  previousIdentifiers: [String!]!
  """
  The order of the item in the sub-issue list. Only set if the issue has a parent.
  """
  subIssueSortOrder: Float
  """
  Issue's human readable identifier (e.g. ENG-123).
  """
  identifier: String!
  """
  Label for the priority.
  """
  priorityLabel: String!
  """
  Issue URL.
  """
  url: String!
  """
  The team that the issue is associated with.
  """
  team: Team!
  """
  The cycle that the issue is associated with.
  """
  cycle: Cycle
  """
  The workflow state that the issue is associated with.
  """
  state: WorkflowState!
  """
  The user to whom the issue is assigned to.
  """
  assignee: User
  """
  The parent of the issue.
  """
  parent: Issue
  """
  The project that the issue is associated with.
  """
  project: Project
  """
  Suggested branch name for the issue.
  """
  branchName: String!
  """
  Users who are subscribed to the issue.
  """
  subscribers(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  The user who created the issue.
  """
  creator: User
  """
  Children of the issue.
  """
  children(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Comments associated with the issue.
  """
  comments(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CommentConnection!
  """
  History entries associated with the issue.
  """
  history(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueHistoryConnection!
  """
  Labels associated with this issue.
  """
  labels(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  Integration resources for this issue.
  """
  integrationResources(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationResourceConnection!
  """
  Relations associated with this issue.
  """
  relations(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
  """
  Inverse relations associated with this issue.
  """
  inverseRelations(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueRelationConnection!
}
"""
The `JSON` scalar type represents JSON values
"""
scalar JSON
"""
The `TimelessDateScalar` scalar type represents Date values without a timestamp. It expects strings in the format YYYY-MM-DD
"""
scalar TimelessDateScalar
"""
An organizational unit that contains issues.
"""
type Team implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The team's name.
  """
  name: String!
  """
  The team's unique key. The key is used in URLs.
  """
  key: String!
  """
  The team's description.
  """
  description: String
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean!
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float!
  """
  The duration of a cycle in weeks.
  """
  cycleDuration: Float!
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Float!
  """
  Auto assign started issues to current cycle.
  """
  cycleIssueAutoAssignStarted: Boolean!
  """
  Auto assign completed issues to current cycle.
  """
  cycleIssueAutoAssignCompleted: Boolean!
  """
  Only allow issues issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean!
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float!
  """
  The timezone of the team. Defaults to "America/Los_Angeles"
  """
  timezone: String!
  """
  Unique hash for the team to be used in invite URLs.
  """
  inviteHash: String!
  """
  The issue estimation type to use.
  """
  issueEstimationType: String!
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean!
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean!
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float!
  """
  The default template to use for new issues created by members of the team.
  """
  defaultTemplateForMembersId: String!
  """
  The default template to use for new issues created by non-members of the team.
  """
  defaultTemplateForNonMembersId: String!
  """
  The workflow state into which issues are moved when a PR has been opened as draft.
  """
  draftWorkflowState: WorkflowState
  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowState: WorkflowState
  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowState: WorkflowState
  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowState: WorkflowState
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean!
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean!
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean!
  """
  Whether to send new issue status updates to Slack.
  """
  slackIssueStatuses: Boolean!
  """
  Period after which issues are automatically closed in months. Null/undefined means disabled.
  """
  autoClosePeriod: Float!
  """
  The canceled workflow state which auto closed issues will be set to. Defaults to the first canceled state.
  """
  autoCloseStateId: String
  """
  Period after which automatically closed and completed issues are automatically archived in months. Null/undefined means disabled.
  """
  autoArchivePeriod: Float!
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue. Defaults to the first canceled state.
  """
  markedAsDuplicateWorkflowState: WorkflowState
  """
  Issues associated with the team.
  """
  issues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Cycles associated with the team.
  """
  cycles(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): CycleConnection!
  """
  Memberships associated with the team.
  """
  memberships(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamMembershipConnection!
  """
  Projects associated with the team.
  """
  projects(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
  """
  The states that define the workflow associated with the team.
  """
  states(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WorkflowStateConnection!
  """
  Templates associated with the team.
  """
  templates(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TemplateConnection!
  """
  Labels associated with the team.
  """
  labels(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueLabelConnection!
  """
  The organization that the team is associated with.
  """
  organization: Organization!
  """
  Calender feed (iCal) for cycles.
  """
  cycleCalenderUrl: String!
  """
  Webhooks associated with the team.
  """
  webhooks(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): WebhookConnection!
}
"""
A state in a team workflow.
"""
type WorkflowState implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The state's name.
  """
  name: String!
  """
  The state's UI color as a HEX string.
  """
  color: String!
  """
  Description of the state.
  """
  description: String
  """
  The position of the state in the team flow.
  """
  position: Float!
  """
  The type of the state.
  """
  type: String!
  """
  The team to which this state belongs to.
  """
  team: Team!
  """
  Issues belonging in this state.
  """
  issues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
}
type CycleConnection {
  edges: [CycleEdge!]!
  nodes: [Cycle!]!
  pageInfo: PageInfo!
}
type CycleEdge {
  node: Cycle!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A set of issues to be resolved in a specified amount of time.
"""
type Cycle implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The number of the cycle.
  """
  number: Float!
  """
  The custom name of the cycle.
  """
  name: String
  """
  The start time of the cycle.
  """
  startsAt: DateTime!
  """
  The end time of the cycle.
  """
  endsAt: DateTime!
  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime
  """
  The total number of issues in the cycle after each day.
  """
  issueCountHistory: [Float!]!
  """
  The number of completed issues in the cycle after each day.
  """
  completedIssueCountHistory: [Float!]!
  """
  The total number of estimation points after each day.
  """
  scopeHistory: [Float!]!
  """
  The number of completed estimation points after each day.
  """
  completedScopeHistory: [Float!]!
  """
  The team that the cycle is associated with.
  """
  team: Team!
  """
  Issues associated with the cycle.
  """
  issues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Issues that weren't completed when the cycle was closed.
  """
  uncompletedIssuesUponClose(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
}
type PageInfo {
  """
  Indicates if there are more results when paginating backward.
  """
  hasPreviousPage: Boolean!
  """
  Indicates if there are more results when paginating forward.
  """
  hasNextPage: Boolean!
  """
  Cursor representing the first result in the paginated results.
  """
  startCursor: String
  """
  Cursor representing the last result in the paginated results.
  """
  endCursor: String
}
type TeamMembershipConnection {
  edges: [TeamMembershipEdge!]!
  nodes: [TeamMembership!]!
  pageInfo: PageInfo!
}
type TeamMembershipEdge {
  node: TeamMembership!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
Defines the membership of a user to a team.
"""
type TeamMembership implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The user that the membership is associated with.
  """
  user: User!
  """
  The team that the membership is associated with.
  """
  team: Team!
}
type ProjectConnection {
  edges: [ProjectEdge!]!
  nodes: [Project!]!
  pageInfo: PageInfo!
}
type ProjectEdge {
  node: Project!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A project.
"""
type Project implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The project's name.
  """
  name: String!
  """
  The project's description.
  """
  description: String!
  """
  The project's unique URL slug.
  """
  slugId: String!
  """
  The icon of the project.
  """
  icon: String
  """
  The project's color.
  """
  color: String!
  """
  The type of the state.
  """
  state: String!
  """
  The user who created the project.
  """
  creator: User!
  """
  The project lead.
  """
  lead: User
  """
  The milestone that this project is associated with.
  """
  milestone: Milestone
  """
  The estimated completion date of the project.
  """
  targetDate: TimelessDateScalar
  """
  The time at which the project was moved into started state.
  """
  startedAt: DateTime
  """
  The time at which the project was moved into completed state.
  """
  completedAt: DateTime
  """
  The time at which the project was moved into canceled state.
  """
  canceledAt: DateTime
  """
  The sort order for the project within its milestone.
  """
  sortOrder: Float!
  """
  The total number of issues in the project after each week.
  """
  issueCountHistory: [Float!]!
  """
  The number of completed issues in the project after each week.
  """
  completedIssueCountHistory: [Float!]!
  """
  The total number of estimation points after each week.
  """
  scopeHistory: [Float!]!
  """
  The number of completed estimation points after each week.
  """
  completedScopeHistory: [Float!]!
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean!
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean!
  """
  Whether to send new issue status updates to Slack.
  """
  slackIssueStatuses: Boolean!
  """
  Teams associated with this project.
  """
  teams(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  Users that are members of the project.
  """
  members(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  Issues associated with the project.
  """
  issues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
  """
  Links associated with the project.
  """
  links(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectLinkConnection!
}
"""
A milestone that contains projects.
"""
type Milestone implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The name of the milestone.
  """
  name: String!
  """
  The organization that the milestone belongs to.
  """
  organization: Organization!
  """
  The sort order for the milestone.
  """
  sortOrder: Float!
  """
  Projects associated with the milestone.
  """
  projects(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): ProjectConnection!
}
"""
An organization. Organizations are root-level objects that contain user accounts and teams.
"""
type Organization implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The organization's name.
  """
  name: String!
  """
  The organization's unique URL key.
  """
  urlKey: String!
  """
  The organization's logo URL.
  """
  logoUrl: String
  upgradeThresholdExceeded: Boolean!
  """
  Rolling 30-day total upload volume for the organization, in megabytes.
  """
  periodUploadVolume: Float!
  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String!
  """
  Whether the Git integration linkback messages should be sent to private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean!
  """
  Whether the Git integration linkback messages should be sent to public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean!
  """
  Whether the organization is using project milestones.
  """
  projectMilestonesEnabled: Boolean!
  """
  Whether SAML authentication is enabled for organization.
  """
  samlEnabled: Boolean!
  """
  Allowed authentication providers, empty array means all are allowed
  """
  allowedAuthServices: [String!]!
  """
  Users associated with the organization.
  """
  users(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): UserConnection!
  """
  Teams associated with the organization.
  """
  teams(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): TeamConnection!
  """
  Milestones associated with the organization.
  """
  mildestones(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): MilestoneConnection!
  """
  Integrations associated with the organization.
  """
  integrations(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IntegrationConnection!
  """
  The organization's subscription to a paid plan.
  """
  subscription: Subscription
  """
  Number of active users in the organization.
  """
  userCount: Int!
  """
  Number of issues in the organization.
  """
  createdIssueCount: Int!
}
type UserConnection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: PageInfo!
}
type UserEdge {
  node: User!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
type TeamConnection {
  edges: [TeamEdge!]!
  nodes: [Team!]!
  pageInfo: PageInfo!
}
type TeamEdge {
  node: Team!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
type MilestoneConnection {
  edges: [MilestoneEdge!]!
  nodes: [Milestone!]!
  pageInfo: PageInfo!
}
type MilestoneEdge {
  node: Milestone!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
type IntegrationConnection {
  edges: [IntegrationEdge!]!
  nodes: [Integration!]!
  pageInfo: PageInfo!
}
type IntegrationEdge {
  node: Integration!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
An integration with an external service.
"""
type Integration implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The integration's type.
  """
  service: String!
  """
  The external service identifier.
  """
  serviceId: String
  """
  Settings related to the integration.
  """
  settings: IntegrationSettings!
  """
  The organization that the integration is associated with.
  """
  organization: Organization!
  """
  The team that the integration is associated with.
  """
  team: Team
  """
  The user that added the integration.
  """
  creator: User!
}
"""
The integration resource's settings
"""
type IntegrationSettings {
  slackPost: SlackPostSettings
  slackProjectPost: SlackPostSettings
  googleSheets: GoogleSheetsSettings
  sentry: SentrySettings
}
"""
Slack notification specific settings.
"""
type SlackPostSettings {
  channel: String!
  channelId: String!
  configurationUrl: String!
}
"""
Google Sheets specific settings.
"""
type GoogleSheetsSettings {
  spreadsheetId: String!
  spreadsheetUrl: String!
  sheetId: Float!
  updatedIssuesAt: DateTime!
}
"""
Sentry specific settings.
"""
type SentrySettings {
  """
  The slug of the Sentry organization being connected.
  """
  organizationSlug: String!
}
"""
The subscription of an organization.
"""
type Subscription implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The subscription type.
  """
  type: String!
  """
  The number of seats in the subscription.
  """
  seats: Float!
  """
  The creator of the subscription.
  """
  creator: User
  """
  The organization that the subscription is associated with.
  """
  organization: Organization!
  """
  The date the subscription was canceled, if any.
  """
  canceledAt: DateTime
  """
  The subscription type of a pending change. Null if no change pending.
  """
  pendingChangeType: String
}
type ProjectLinkConnection {
  edges: [ProjectLinkEdge!]!
  nodes: [ProjectLink!]!
  pageInfo: PageInfo!
}
type ProjectLinkEdge {
  node: ProjectLink!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
An external link for a project.
"""
type ProjectLink implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The link's URL.
  """
  url: String!
  """
  The link's label.
  """
  label: String!
  """
  The user who created the link.
  """
  creator: User!
  """
  The project that the link is associated with.
  """
  project: Project!
}
type WorkflowStateConnection {
  edges: [WorkflowStateEdge!]!
  nodes: [WorkflowState!]!
  pageInfo: PageInfo!
}
type WorkflowStateEdge {
  node: WorkflowState!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
type TemplateConnection {
  edges: [TemplateEdge!]!
  nodes: [Template!]!
  pageInfo: PageInfo!
}
type TemplateEdge {
  node: Template!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A template object used for creating new issues faster.
"""
type Template implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The entity type this template is for.
  """
  type: String!
  """
  The name of the template.
  """
  name: String!
  """
  Template description.
  """
  description: String
  """
  Template data.
  """
  templateData: JSON!
  """
  The team that the template is associated with.
  """
  team: Team!
  """
  The user who created the template.
  """
  creator: User
}
type IssueLabelConnection {
  edges: [IssueLabelEdge!]!
  nodes: [IssueLabel!]!
  pageInfo: PageInfo!
}
type IssueLabelEdge {
  node: IssueLabel!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
Labels that can be associated with issues.
"""
type IssueLabel implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The label's name.
  """
  name: String!
  """
  The label's description.
  """
  description: String
  """
  The label's color as a HEX string.
  """
  color: String!
  """
  The team to which the label belongs to.
  """
  team: Team!
  """
  The user who created the label.
  """
  creator: User
  """
  Issues associated with the label.
  """
  issues(
    """
    A cursor to be used with last for backward pagination.
    """
    before: String
    """
    A cursor to be used with first for forward pagination
    """
    after: String
    """
    The number of items to forward paginate (used with after). Defaults to 50.
    """
    first: Int
    """
    The number of items to backward paginate (used with before). Defaults to 50.
    """
    last: Int
    """
    Should archived resources be included (default: false)
    """
    includeArchived: Boolean
    """
    By which field should the pagination order by. Available options are createdAt (default) and updatedAt.
    """
    orderBy: PaginationOrderBy
  ): IssueConnection!
}
type WebhookConnection {
  edges: [WebhookEdge!]!
  nodes: [Webhook!]!
  pageInfo: PageInfo!
}
type WebhookEdge {
  node: Webhook!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A webhook used to send HTTP notifications over data updates
"""
type Webhook implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Webhook URL
  """
  url: String!
  """
  Whether the Webhook is enabled.
  """
  enabled: Boolean!
  """
  The team that the webhook is associated with.
  """
  team: Team!
  """
  The user who created the webhook.
  """
  creator: User
  """
  Secret token for verifying the origin on the recipient side.
  """
  secret: String
}
type CommentConnection {
  edges: [CommentEdge!]!
  nodes: [Comment!]!
  pageInfo: PageInfo!
}
type CommentEdge {
  node: Comment!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A comment associated with an issue.
"""
type Comment implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The comment content in markdown format.
  """
  body: String!
  """
  Comment content as a Prosemirror document.
  """
  bodyData: JSON
  """
  Emoji reactions on the comment.
  """
  reactionData: [JSON!]!
  """
  The time user edited the comment.
  """
  editedAt: DateTime
  """
  The user who wrote the comment.
  """
  user: User!
  """
  The issue that the comment is associated with.
  """
  issue: Issue!
}
type IssueHistoryConnection {
  edges: [IssueHistoryEdge!]!
  nodes: [IssueHistory!]!
  pageInfo: PageInfo!
}
type IssueHistoryEdge {
  node: IssueHistory!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A record of changes to an issue.
"""
type IssueHistory implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The issue that was changed.
  """
  issue: Issue!
  """
  The user who made these changes. If null, possibly means that the change made by an integration.
  """
  actor: User
  """
  The integration that made these changes. If null, possibly means that the change was made by a user.
  """
  integration: Integration
  """
  Whether the issue's description was updated.
  """
  updatedDescription: Boolean
  """
  What the title was changed from.
  """
  fromTitle: String
  """
  What the title was changed to.
  """
  toTitle: String
  """
  The user from whom the issue was re-assigned from.
  """
  fromAssignee: User
  """
  The user to whom the issue was assigned to.
  """
  toAssignee: User
  """
  What the priority was changed from.
  """
  fromPriority: Float
  """
  What the priority was changed to.
  """
  toPriority: Float
  """
  The team from which the issue was moved from.
  """
  fromTeam: Team
  """
  The team to which the issue was moved to.
  """
  toTeam: Team
  """
  The previous parent of the issue.
  """
  fromParent: Issue
  """
  The new parent of the issue.
  """
  toParent: Issue
  """
  The previous workflow state of the issue.
  """
  fromState: WorkflowState
  """
  The new workflow state of the issue.
  """
  toState: WorkflowState
  """
  The previous cycle of the issue.
  """
  fromCycle: Cycle
  """
  The new cycle of the issue.
  """
  toCycle: Cycle
  """
  The previous project of the issue.
  """
  fromProject: Project
  """
  The new project of the issue.
  """
  toProject: Project
  """
  What the estimate was changed from.
  """
  fromEstimate: Float
  """
  What the estimate was changed to.
  """
  toEstimate: Float
  """
  Whether the issue was archived or un-archived.
  """
  archived: Boolean
  """
  ID's of labels that were added.
  """
  addedLabelIds: [String!]
  """
  ID's of labels that were removed.
  """
  removedLabelIds: [String!]
  """
  Changed issue relationships.
  """
  relationChanges: [String!]
  autoClosed: Boolean
  autoArchived: Boolean
  """
  What the due date was changed from
  """
  fromDueDate: TimelessDateScalar
  """
  What the due date was changed to
  """
  toDueDate: TimelessDateScalar
}
type IntegrationResourceConnection {
  edges: [IntegrationResourceEdge!]!
  nodes: [IntegrationResource!]!
  pageInfo: PageInfo!
}
type IntegrationResourceEdge {
  node: IntegrationResource!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
An integration resource created by an external service.
"""
type IntegrationResource implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The integration's type.
  """
  resourceType: String!
  """
  The external service resource ID.
  """
  resourceId: String!
  """
  Detailed information about the external resource.
  """
  data: IntegrationResourceData!
  """
  The integration that the resource is associated with.
  """
  integration: Integration!
  """
  The issue that the resource is associated with.
  """
  issue: Issue!
  """
  Pull request information for GitHub pull requests and GitLab merge requests.
  """
  pullRequest: PullRequestPayload!
}
"""
Integration resource's payload
"""
type IntegrationResourceData {
  """
  The payload for an IntegrationResource of type 'githubPullRequest'
  """
  githubPullRequest: PullRequestPayload
  """
  The payload for an IntegrationResource of type 'gitlabMergeRequest'
  """
  gitlabMergeRequest: PullRequestPayload
  """
  The payload for an IntegrationResource of type 'githubCommit'
  """
  githubCommit: CommitPayload
  """
  The payload for an IntegrationResource of type 'sentryIssue'
  """
  sentryIssue: SentryIssuePayload
}
"""
Pull request data
"""
type PullRequestPayload {
  status: String!
  number: Float!
  url: String!
  draft: Boolean!
  id: String!
  title: String!
  branch: String!
  userId: String!
  userLogin: String!
  repoLogin: String!
  repoName: String!
  createdAt: String!
  updatedAt: String!
  closedAt: String!
  mergedAt: String!
}
"""
GitHub's commit data
"""
type CommitPayload {
  id: String!
  message: String!
  timestamp: String!
  url: String!
  added: [String!]!
  removed: [String!]!
  modified: [String!]!
}
"""
Sentry issue data
"""
type SentryIssuePayload {
  """
  The Sentry identifier for the issue.
  """
  issueId: String!
  """
  The description of the issue.
  """
  webUrl: String!
  """
  The type of the actor who created the issue.
  """
  actorType: String!
  """
  The Sentry identifier of the actor who created the issue.
  """
  actorId: Float!
  """
  The name of the Sentry actor who created this issue.
  """
  actorName: String!
  """
  The Sentry identifier of the project this issue belongs to.
  """
  projectId: Float!
  """
  The slug of the project this issue belongs to.
  """
  projectSlug: String!
  """
  The title of the issue.
  """
  issueTitle: String!
  """
  The shortId of the issue.
  """
  shortId: String!
  """
  The date this issue was first seen.
  """
  firstSeen: String!
  """
  The name of the first release version this issue appeared on, if available.
  """
  firstVersion: String
}
type IssueRelationConnection {
  edges: [IssueRelationEdge!]!
  nodes: [IssueRelation!]!
  pageInfo: PageInfo!
}
type IssueRelationEdge {
  node: IssueRelation!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A relation between two issues.
"""
type IssueRelation implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The relationship of the issue with the related issue.
  """
  type: String!
  """
  The issue whose relationship is being described.
  """
  issue: Issue!
  """
  The related issue.
  """
  relatedIssue: Issue!
}
type OrganizationExistsPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  Whether the organization exists.
  """
  exists: Boolean!
}
"""
Contains either the full serialized state of the application or delta packets that the requester can
  apply to the local data set in order to be up-to-date.
"""
type SyncResponse {
  """
  The full state of the organization as a serialized JSON object.
      Mutually exclusive with the delta property
  """
  state: String
  """
  JSON serialized delta changes that the client can apply to its local state
      in order to catch up with the state of the world.
  """
  delta: String
  """
  A JSON serialized collection of model objects loaded from the archive
  """
  archive: String
  """
  The last sync id covered by the response.
  """
  lastSyncId: Float!
  """
  The version of the remote database. Incremented by 1 for each migration run on the database.
  """
  databaseVersion: Float!
}
"""
Contains requested archived model objects.
"""
type ArchiveResponse {
  """
  A JSON serialized collection of model objects loaded from the archive
  """
  archive: String!
  """
  The total number of entities in the archive.
  """
  totalCount: Float!
  """
  The version of the remote database. Incremented by 1 for each migration run on the database.
  """
  databaseVersion: Float!
}
"""
A user account. Super user required.
"""
type UserAccountAdminPrivileged {
  """
  The models identifier.
  """
  id: ID!
  """
  The time at which the model was created.
  """
  createdAt: DateTime!
  """
  The time at which the model was updated.
  """
  updatedAt: DateTime!
  """
  The time at which the model was archived.
  """
  archivedAt: DateTime
  """
  The user's name.
  """
  name: String
  """
  The user's email address.
  """
  email: String!
  """
  The authentication service used to create the account.
  """
  service: String!
  users: [UserAdminPrivileged!]!
}
"""
A user that has access to the the resources of an organization. Super user required.
"""
type UserAdminPrivileged implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The user's full name.
  """
  name: String!
  """
  The user's display (nick) name. Unique within each organization.
  """
  displayName: String!
  """
  The user's email address.
  """
  email: String!
  """
  An URL to the user's avatar image.
  """
  avatarUrl: String
  """
  Reason why is the account disabled.
  """
  disableReason: String!
  """
  Unique hash for the user to be used in invite URLs.
  """
  inviteHash: String!
  userAccountId: String!
  """
  The settings of the user.
  """
  settings: UserSettings!
  """
  The last time the user was seen online. If null, the user is currently online.
  """
  lastSeen: DateTime
  """
  Whether the user is an organization administrator.
  """
  admin: Boolean!
  """
  Whether the user account is active or disabled.
  """
  active: Boolean!
  """
  Issues assigned to the user.
  """
  assignedIssues: IssueConnection!
  """
  Issues created by the user.
  """
  createdIssues: IssueConnection!
  """
  Organization in which the user belongs to. Super user required.
  """
  organization: OrganizationAdminPrivileged!
  """
  Number of issues created.
  """
  createdIssueCount: Int!
  """
  Memberships associated with the user.
  """
  teamMemberships: TeamMembershipConnection!
}
"""
An organization. Super user required.
"""
type OrganizationAdminPrivileged implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The organization's name.
  """
  name: String!
  """
  The organization's unique URL key.
  """
  urlKey: String!
  """
  The organization's logo URL.
  """
  logoUrl: String
  upgradeThresholdExceeded: Boolean!
  """
  Rolling 30-day total upload volume for the organization, in megabytes.
  """
  periodUploadVolume: Float!
  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String!
  """
  Whether the Git integration linkback messages should be sent to private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean!
  """
  Whether the Git integration linkback messages should be sent to public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean!
  """
  Whether the organization is using project milestones.
  """
  projectMilestonesEnabled: Boolean!
  """
  Whether SAML authentication is enabled for organization.
  """
  samlEnabled: Boolean!
  """
  Allowed authentication providers, empty array means all are allowed
  """
  allowedAuthServices: [String!]!
  """
  Users associated with the organization.
  """
  users: UserConnection!
  """
  Teams associated with the organization.
  """
  teams: TeamConnection!
  """
  Milestones associated with the organization.
  """
  mildestones: MilestoneConnection!
  """
  Integrations associated with the organization.
  """
  integrations: IntegrationConnection!
  """
  The organization's subscription to a paid plan. Super user required.
  """
  subscription: SubscriptionAdminPrivileged
  """
  Number of active users in the organization.
  """
  userCount: Int!
  """
  Number of issues in the organization.
  """
  createdIssueCount: Int!
  """
  The Stripe identifier for the organization.
  """
  stripeCustomerId: String
}
"""
The subscription of an organization. Super user required.
"""
type SubscriptionAdminPrivileged implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The subscription type.
  """
  type: String!
  """
  The number of seats in the subscription.
  """
  seats: Float!
  """
  The creator of the subscription.
  """
  creator: User
  """
  The organization that the subscription is associated with.
  """
  organization: Organization!
  """
  The date the subscription was canceled, if any.
  """
  canceledAt: DateTime
  """
  The subscription type of a pending change. Null if no change pending.
  """
  pendingChangeType: String
  """
  The Stripe identifier for the subscription.
  """
  stripeSubscriptionId: String!
  """
  The Stripe status for the subscription.
  """
  stripeStatus: String!
}
type ApiKeyConnection {
  edges: [ApiKeyEdge!]!
  nodes: [ApiKey!]!
  pageInfo: PageInfo!
}
type ApiKeyEdge {
  node: ApiKey!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
An API key. Grants access to the user's resources.
"""
type ApiKey implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The label of the API key.
  """
  label: String!
}
"""
Public information of the OAuth application.
"""
type Application {
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  Application name.
  """
  name: String!
  """
  Information about the application.
  """
  description: String
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  Image of the application.
  """
  imageUrl: String
}
type AuthResolverResponse {
  """
  User account ID.
  """
  id: String!
  """
  JWT token for authentication of the account.
  """
  token: String
  """
  Email for the authenticated account.
  """
  email: String
  """
  Should the signup flow allow access for the domain.
  """
  allowDomainAccess: Boolean
  """
  Users belonging to this account.
  """
  users: [User!]!
  """
  Organizations this account has access to, but is not yet a member.
  """
  availableOrganizations: [Organization!]
}
type SsoUrlFromEmailResponse {
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  SAML SSO sign-in URL.
  """
  samlSsoUrl: String!
}
type BillingDetailsPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The customer's email address the invoices are sent to.
  """
  email: String
  """
  List of invoices, if any.
  """
  invoices: [Invoice!]!
  """
  The payment method.
  """
  paymentMethod: Card
}
type Invoice {
  """
  The URL at which the invoice can be viewed or paid.
  """
  url: String
  """
  The creation date of the invoice.
  """
  created: TimelessDateScalar!
  """
  The due date of the invoice.
  """
  dueDate: TimelessDateScalar
  """
  The status of the invoice.
  """
  status: String!
  """
  The invoice total, in cents.
  """
  total: Float!
}
type Card {
  """
  The brand of the card, e.g. Visa.
  """
  brand: String!
  """
  The last four digits used to identify the card.
  """
  last4: String!
}
type CollaborationDocumentUpdatePayload {
  """
  Document steps the client has not seen yet and need to rebase it's local steps on.
  """
  steps: StepsResponse
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type StepsResponse {
  """
  Client's document version.
  """
  version: Int!
  """
  New document steps from the client.
  """
  steps: [JSON!]
  """
  List of client IDs for the document steps.
  """
  clientIds: [String!]!
}
"""
A custom view that has been saved by a user.
"""
type CustomView implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The name of the custom view.
  """
  name: String!
  """
  The description of the custom view.
  """
  description: String
  """
  The icon of the custom view.
  """
  icon: String
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The organization of the custom view.
  """
  organization: Organization!
  """
  The team associated with the custom view.
  """
  team: Team
  """
  The user who created the custom view.
  """
  creator: User!
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject!
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean!
}
type CustomViewConnection {
  edges: [CustomViewEdge!]!
  nodes: [CustomView!]!
  pageInfo: PageInfo!
}
type CustomViewEdge {
  node: CustomView!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A custom emoji.
"""
type Emoji implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The emoji's name.
  """
  name: String!
  """
  The emoji image URL.
  """
  url: String!
  """
  The source of the emoji.
  """
  source: String!
  """
  The user who created the emoji.
  """
  creator: User!
  """
  The organization that the emoji belongs to.
  """
  organization: Organization!
}
type EmojiConnection {
  edges: [EmojiEdge!]!
  nodes: [Emoji!]!
  pageInfo: PageInfo!
}
type EmojiEdge {
  node: Emoji!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
User favorites presented in the sidebar.
"""
type Favorite implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The type of the favorite.
  """
  type: String!
  """
  The order of the item in the favorites list.
  """
  sortOrder: Float!
  """
  The owner of the favorite.
  """
  user: User!
  """
  Favorited issue.
  """
  issue: Issue
  """
  Favorited project.
  """
  project: Project
  """
  Favorited project team.
  """
  projectTeam: Project
  """
  Favorited cycle.
  """
  cycle: Cycle
  """
  Favorited issue label.
  """
  label: IssueLabel
}
type FavoriteConnection {
  edges: [FavoriteEdge!]!
  nodes: [Favorite!]!
  pageInfo: PageInfo!
}
type FavoriteEdge {
  node: Favorite!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
type FigmaEmbedPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Figma embed information.
  """
  figmaEmbed: FigmaEmbed
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
"""
Object representing Figma preview information.
"""
type FigmaEmbed {
  """
  Figma file name.
  """
  name: String!
  """
  Date when the file was updated at the time of embedding.
  """
  lastModified: DateTime!
  """
  Node name.
  """
  nodeName: String
  """
  Figma screenshot URL.
  """
  url: String
}
type InvitePagePayload {
  """
  Invite data.
  """
  inviteData: InviteData
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type InviteData {
  """
  The name of the inviter.
  """
  inviterName: String!
  """
  Avatar URLs for the invitees.
  """
  avatarURLs: [String!]!
  """
  Team names for the invitees.
  """
  teamNames: [String!]!
  """
  Team identifiers for the invitees.
  """
  teamIds: [String!]!
  """
  The name of the organization the users were invited to.
  """
  organizationName: String!
  """
  The domain of the organization the users were invited to.
  """
  organizationDomain: String!
  """
  The logo of the organization the users were invited to.
  """
  organizationLogoUrl: String
  """
  The user count of the organization.
  """
  userCount: Float!
}
type NotificationConnection {
  edges: [NotificationEdge!]!
  nodes: [Notification!]!
  pageInfo: PageInfo!
}
type NotificationEdge {
  node: Notification!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
A notification sent to a user.
"""
type Notification implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Notification type
  """
  type: String!
  """
  Name of the reaction emoji associated with the notification.
  """
  reactionEmoji: String
  """
  The time at when the user marked the notification as read. Null, if the the user hasn't read the notification
  """
  readAt: DateTime
  """
  The time at when an email reminder for this notification was sent to the user. Null, if no email
      reminder has been sent.
  """
  emailedAt: DateTime
  """
  The recipient of the notification.
  """
  user: User!
  """
  The issue that the notification is associated with.
  """
  issue: Issue!
  """
  The team which the notification is associated with.
  """
  team: Team!
  """
  The comment which the notification is associated with.
  """
  comment: Comment
}
type NotificationSubscriptionConnection {
  edges: [NotificationSubscriptionEdge!]!
  nodes: [NotificationSubscription!]!
  pageInfo: PageInfo!
}
type NotificationSubscriptionEdge {
  node: NotificationSubscription!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
Notification subscriptions for models.
"""
type NotificationSubscription implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The type of the subscription.
  """
  type: String!
  """
  The user associated with notification subscriptions.
  """
  user: User!
  """
  Subscribed team.
  """
  team: Team
  """
  Subscribed project.
  """
  project: Project
}
type OrganizationInviteConnection {
  edges: [OrganizationInviteEdge!]!
  nodes: [OrganizationInvite!]!
  pageInfo: PageInfo!
}
type OrganizationInviteEdge {
  node: OrganizationInvite!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
An invitation to the organization that has been sent via email.
"""
type OrganizationInvite implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The invitees email address.
  """
  email: String!
  """
  The invite was sent to external address.
  """
  external: Boolean!
  """
  The time at which the invite was accepted. Null, if the invite hasn't been accepted
  """
  acceptedAt: DateTime
  """
  The time at which the invite will be expiring. Null, if the invite shouldn't expire
  """
  expiresAt: DateTime
  """
  The user who created the invitation.
  """
  inviter: User!
  """
  The user who has accepted the invite. Null, if the invite hasn't been accepted.
  """
  invitee: User
  """
  The organization that the invite is associated with.
  """
  organization: Organization!
}
type PushSubscriptionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
"""
A reaction associated with a comment.
"""
type Reaction implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Name of the reaction's emoji.
  """
  emoji: String!
  """
  The user who reacted.
  """
  user: User!
  """
  The comment that the reaction is associated with.
  """
  comment: Comment!
}
type ReactionConnection {
  edges: [ReactionEdge!]!
  nodes: [Reaction!]!
  pageInfo: PageInfo!
}
type ReactionEdge {
  node: Reaction!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
type ViewPreferencesConnection {
  edges: [ViewPreferencesEdge!]!
  nodes: [ViewPreferences!]!
  pageInfo: PageInfo!
}
type ViewPreferencesEdge {
  node: ViewPreferences!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
"""
View preferences.
"""
type ViewPreferences implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  The view preference type.
  """
  type: String!
  """
  The view type.
  """
  viewType: String!
}
type Mutation {
  """
  Updates a user. Only available to organization admins and the user themselves.
  """
  userUpdate(
    """
    A partial user object to update the user with.
    """
    input: UpdateUserInput!
    """
    The identifier of the user to update. Use `me` to reference currently authenticated user.
    """
    id: String!
  ): UserPayload!
  """
  Makes user an admin. Can only be called by an admin.
  """
  userPromoteAdmin(
    """
    The identifier of the user to make an admin.
    """
    id: String!
  ): UserAdminPayload!
  """
  Makes user a regular user. Can only be called by an admin.
  """
  userDemoteAdmin(
    """
    The identifier of the user to make a regular user.
    """
    id: String!
  ): UserAdminPayload!
  """
  Suspends a user. Can only be called by an admin.
  """
  userSuspend(
    """
    The identifier of the user to suspend.
    """
    id: String!
  ): UserAdminPayload!
  """
  Un-suspends a user. Can only be called by an admin.
  """
  userUnsuspend(
    """
    The identifier of the user to unsuspend.
    """
    id: String!
  ): UserAdminPayload!
  """
  Updates the user's organization.
  """
  organizationUpdate(
    """
    A partial organization object to update the organization with.
    """
    input: UpdateOrganizationInput!
  ): OrganizationPayload!
  """
  Get an organization's delete confirmation token. Administrator privileges required.
  """
  organizationDeleteChallenge: OrganizationDeletePayload!
  """
  Delete's an organization. Administrator privileges required.
  """
  organizationDelete(
    """
    Information required to delete an organization.
    """
    input: DeleteOrganizationInput!
  ): OrganizationDeletePayload!
  """
  Disable organization access. Superuser privileges required.
  """
  organizationToggleAccess(
    """
    The identifier of the organization to update.
    """
    id: String!
  ): OrganizationAccessPayload!
  """
  Change email domain for all users and accounts in the organization.
  """
  organizationChangeEmailDomain(
    """
    The email domain to update to.
    """
    toDomain: String!
    """
    The email domain to update from.
    """
    fromDomain: String!
    """
    The identifier of the organization to update.
    """
    id: String!
  ): OrganizationAccessPayload!
  """
  Toggle SAML authentication on or off for an organization. Superuser privileges required.
  """
  organizationToggleSamlEnabled(
    """
    The identifier of the organization to update.
    """
    id: String!
  ): OrganizationSamlConfigurePayload!
  """
  Configure SAML authentication for an organization. Superuser privileges required.
  """
  organizationConfigureSaml(
    """
    Saml configuration for the organization.
    """
    samlConfiguration: SamlConfigurationInput!
    """
    The identifier of the organization to update.
    """
    id: String!
  ): OrganizationSamlConfigurePayload!
  """
  Executes admin command.
  """
  adminCommand(
    """
    The command to perform.
    """
    input: AdminCommandInput!
  ): AdminCommandPayload!
  """
  Sends out emails in bulk to our users.
  """
  adminBulkEmail(
    """
    A random delay in seconds to add to the email task.
    """
    randomDelay: Int
    """
    The user emails to send the email to.
    """
    emails: [String!]!
    """
    The content of the email to send in markdown format.
    """
    markdownContent: String!
    """
    The subject of the email to send.
    """
    subject: String!
  ): AdminCommandPayload!
  """
  Creates a stripe customer for an organization.
  """
  adminCreateStripeCustomer(
    """
    The id of the organization to create the stripe customer for. If the organization already has a customer account, an error will be returned.
    """
    organizationId: String!
  ): AdminCommandPayload!
  """
  Schedules a task. Currently only anonymous tasks without any parameters can be scheduled.
  """
  adminScheduleAnonymousTask(
    """
    The name of the task to execute
    """
    taskName: String!
  ): AdminCommandPayload!
  """
  Changes the email address for the user account and all of its users.
  """
  adminUserAccountChangeEmail(newEmail: String!, id: String!): UserAccountAdminPrivileged!
  """
  [Deprecated] Creates a new event.
  """
  eventCreate(
    """
    The event to create.
    """
    input: EventCreateInput!
  ): EventPayload!
  """
  Creates a new API key.
  """
  apiKeyCreate(
    """
    The api key object to create.
    """
    input: ApiKeyCreateInput!
  ): ApiKeyPayload!
  """
  Deletes an API key.
  """
  apiKeyDelete(
    """
    The identifier of the API key to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Finds or creates a new user account by email and sends an email with token.
  """
  emailUserAccountAuthChallenge(
    """
    The data used for email authentication.
    """
    input: EmailUserAccountAuthChallengeInput!
  ): EmailUserAccountAuthChallengeResponse!
  """
  Authenticates a user account via email and authentication token.
  """
  emailTokenUserAccountAuth(
    """
    The data used for email authentication.
    """
    input: EmailUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Authenticate user account through Google OAuth. This is the 2nd step of OAuth flow.
  """
  googleUserAccountAuth(
    """
    The data used for Google authentication.
    """
    input: GoogleUserAccountAuthInput!
  ): AuthResolverResponse!
  """
  Creates an organization from onboarding.
  """
  createOrganizationFromOnboarding(
    """
    Onboarding survey.
    """
    survey: OnboardingCustomerSurvey
    """
    Organization details for the new organization.
    """
    input: CreateOrganizationInput!
  ): CreateOrJoinOrganizationResponse!
  """
  Join an organization from onboarding.
  """
  joinOrganizationFromOnboarding(
    """
    Organization details for the organization to join.
    """
    input: JoinOrganizationInput!
  ): CreateOrJoinOrganizationResponse!
  """
  Leave an organization.
  """
  leaveOrganization(
    """
    ID of the organization to leave.
    """
    organizationId: String!
  ): CreateOrJoinOrganizationResponse!
  """
  Updates the billing email address for the customer.
  """
  billingEmailUpdate(
    """
    The properties of the billing details.
    """
    input: BillingEmailUpdateInput!
  ): BillingEmailPayload!
  """
  Update collaborative document with client steps.
  """
  collaborativeDocumentUpdate(input: CollaborationDocumentUpdateInput!): CollaborationDocumentUpdatePayload!
  """
  Creates a new comment.
  """
  commentCreate(
    """
    The comment object to create.
    """
    input: CommentCreateInput!
  ): CommentPayload!
  """
  Updates a comment.
  """
  commentUpdate(
    """
    A partial comment object to update the issue with.
    """
    input: CommentUpdateInput!
    """
    The identifier of the comment to update.
    """
    id: String!
  ): CommentPayload!
  """
  Deletes a comment.
  """
  commentDelete(
    """
    The identifier of the comment to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Saves user message.
  """
  contactCreate(
    """
    The contact entry to create.
    """
    input: ContactCreateInput!
  ): ContactPayload!
  """
  Creates a new custom view.
  """
  customViewCreate(
    """
    The properties of the custom view to create.
    """
    input: CustomViewCreateInput!
  ): CustomViewPayload!
  """
  Updates a custom view.
  """
  customViewUpdate(
    """
    The properties of the custom view to update.
    """
    input: CustomViewUpdateInput!
    """
    The identifier of the custom view to update.
    """
    id: String!
  ): CustomViewPayload!
  """
  Deletes a custom view.
  """
  customViewDelete(
    """
    The identifier of the custom view to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new cycle.
  """
  cycleCreate(
    """
    The cycle object to create.
    """
    input: CycleCreateInput!
  ): CyclePayload!
  """
  Updates a cycle.
  """
  cycleUpdate(
    """
    A partial cycle object to update the cycle with.
    """
    input: CycleUpdateInput!
    """
    The identifier of the cycle to update.
    """
    id: String!
  ): CyclePayload!
  """
  Archives a cycle.
  """
  cycleArchive(
    """
    The identifier of the cycle to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Always fails with internal error. Used to debug logging.
  """
  debugFailWithInternalError: DebugPayload!
  """
  Always logs an error to Sentry as warning. Used to debug logging.
  """
  debugFailWithWarning: DebugPayload!
  """
  Create the SAML test organization in development.
  """
  debugCreateSAMLOrg: DebugPayload!
  """
  Unsubscribes the user from one type of emails.
  """
  emailUnsubscribe(
    """
    Unsubscription details.
    """
    input: EmailUnsubscribeInput!
  ): EmailUnsubscribePayload!
  """
  Creates a custom emoji.
  """
  emojiCreate(
    """
    The emoji object to create.
    """
    input: EmojiCreateInput!
  ): EmojiPayload!
  """
  Deletes an emoji.
  """
  emojiDelete(
    """
    The identifier of the emoji to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new favorite (project, cycle etc).
  """
  favoriteCreate(
    """
    The favorite object to create.
    """
    input: FavoriteCreateInput!
  ): FavoritePayload!
  """
  Updates a favorite.
  """
  favoriteUpdate(
    """
    A partial favorite object to update the favorite with.
    """
    input: FavoriteUpdateInput!
    """
    The identifier of the favorite to update.
    """
    id: String!
  ): FavoritePayload!
  """
  Deletes a favorite reference.
  """
  favoriteDelete(
    """
    The identifier of the favorite reference to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Saves user feedback.
  """
  feedbackCreate(
    """
    The feedback entry to create.
    """
    input: FeedbackCreateInput!
  ): FeedbackPayload!
  """
  XHR request payload to upload an images, video and other attachments directly to Linear's cloud storage.
  """
  fileUpload(
    """
    Optional metadata.
    """
    metaData: JSON
    """
    File size of the uploaded file.
    """
    size: Int!
    """
    MIME type of the uploaded file.
    """
    contentType: String!
    """
    Filename of the uploaded file.
    """
    filename: String!
  ): UploadPayload!
  """
  Upload an image from an URL to Linear.
  """
  imageUploadFromUrl(
    """
    URL of the file to be uploaded to Linear.
    """
    url: String!
  ): ImageUploadFromUrlPayload!
  """
  Connects the organization with the GitHub App.
  """
  integrationGithubConnect(
    """
    The GitHub data to connect with.
    """
    installationId: String!
  ): IntegrationPayload!
  """
  Connects the organization with a GitLab Access Token.
  """
  integrationGitlabConnect(
    """
    The URL of the GitLab installation
    """
    gitlabUrl: String!
    """
    The GitLab Access Token to connect with.
    """
    accessToken: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Slack.
  """
  integrationSlack(
    """
    Whether or not v2 of Slack OAuth should be used
    """
    shouldUseV2Auth: Boolean
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    The Slack OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Integrates your personal notifications with Slack.
  """
  integrationSlackPersonal(
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    The Slack OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Slack webhook integration.
  """
  integrationSlackPost(
    """
    Whether or not v2 of Slack OAuth should be used
    """
    shouldUseV2Auth: Boolean
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    Integration's associated team.
    """
    teamId: String!
    """
    The Slack OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Slack integration for project notifications.
  """
  integrationSlackProjectPost(
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    Integration's associated project.
    """
    projectId: String!
    """
    The Slack OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Imports custom emojis from your Slack workspace.
  """
  integrationSlackImportEmojis(
    """
    The Slack OAuth redirect URI.
    """
    redirectUri: String!
    """
    The Slack OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Figma.
  """
  integrationFigma(
    """
    The Figma OAuth redirect URI.
    """
    redirectUri: String!
    """
    The Figma OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Google Sheets.
  """
  integrationGoogleSheets(
    """
    The Google OAuth code.
    """
    code: String!
  ): IntegrationPayload!
  """
  Manually update Google Sheets data.
  """
  refreshGoogleSheetsData(
    """
    The identifier of the Google Sheets integration to update.
    """
    id: String!
  ): IntegrationPayload!
  """
  Integrates the organization with Sentry.
  """
  integrationSentryConnect(
    """
    The slug of the Sentry organization being connected.
    """
    organizationSlug: String!
    """
    The Sentry grant code that's exchanged for OAuth tokens.
    """
    code: String!
    """
    The Sentry installationId to connect with.
    """
    installationId: String!
  ): IntegrationPayload!
  """
  Deletes an integration.
  """
  integrationDelete(
    """
    The identifier of the integration to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Archives an integration resource.
  """
  integrationResourceArchive(
    """
    The identifier of the integration resource to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new label.
  """
  issueLabelCreate(
    """
    The issue label to create.
    """
    input: IssueLabelCreateInput!
  ): IssueLabelPayload!
  """
  Updates an label.
  """
  issueLabelUpdate(
    """
    A partial label object to update.
    """
    input: IssueLabelUpdateInput!
    """
    The identifier of the label to update.
    """
    id: String!
  ): IssueLabelPayload!
  """
  Archives an issue label.
  """
  issueLabelArchive(
    """
    The identifier of the label to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new issue relation.
  """
  issueRelationCreate(
    """
    The issue relation to create.
    """
    input: IssueRelationCreateInput!
  ): IssueRelationPayload!
  """
  Updates an issue relation.
  """
  issueRelationUpdate(
    """
    The properties of the issue relation to update.
    """
    input: IssueRelationUpdateInput!
    """
    The identifier of the issue relation to update.
    """
    id: String!
  ): IssueRelationPayload!
  """
  Deletes an issue relation.
  """
  issueRelationDelete(
    """
    The identifier of the issue relation to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new issue.
  """
  issueCreate(
    """
    The issue object to create.
    """
    input: IssueCreateInput!
  ): IssuePayload!
  """
  Updates an issue.
  """
  issueUpdate(
    """
    A partial issue object to update the issue with.
    """
    input: IssueUpdateInput!
    """
    The identifier of the issue to update.
    """
    id: String!
  ): IssuePayload!
  """
  Archives an issue.
  """
  issueArchive(
    """
    The identifier of the issue to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Unarchives an issue.
  """
  issueUnarchive(
    """
    The identifier of the issue to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new milestone.
  """
  milestoneCreate(
    """
    The issue object to create.
    """
    input: MilestoneCreateInput!
  ): MilestonePayload!
  """
  Updates a milestone.
  """
  milestoneUpdate(
    """
    A partial milestone object to update the milestone with.
    """
    input: MilestoneUpdateInput!
    """
    The identifier of the milestone to update.
    """
    id: String!
  ): MilestonePayload!
  """
  Deletes a milestone.
  """
  milestoneDelete(
    """
    The identifier of the milestone to delete. Only milestones without projects can be deleted.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a notification.
  """
  notificationCreate(
    """
    A partial notification object to update the issue with.
    """
    input: NotificationUpdateInput!
    """
    The identifier of the notification to update.
    """
    id: String!
  ): NotificationPayload!
  """
  Updates a notification.
  """
  notificationUpdate(
    """
    A partial notification object to update the issue with.
    """
    input: NotificationUpdateInput!
    """
    The identifier of the notification to update.
    """
    id: String!
  ): NotificationPayload!
  """
  [Deprecated] Deletes a notification.
  """
  notificationDelete(
    """
    The identifier of the notification to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Archives a notification.
  """
  notificationArchive(
    """
    The id of the notification to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Unarchives a notification.
  """
  notificationUnarchive(
    """
    The id of the notification to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new notification subscription for a team or a project.
  """
  notificationSubscriptionCreate(
    """
    The subscription object to create.
    """
    input: NotificationSubscriptionCreateInput!
  ): NotificationSubscriptionPayload!
  """
  Deletes a notification subscription reference.
  """
  notificationSubscriptionDelete(
    """
    The identifier of the notification subscription reference to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new OAuth client.
  """
  oauthClientCreate(
    """
    The OAuth client application object to create.
    """
    input: OauthClientCreateInput!
  ): OauthClientPayload!
  """
  Updates an OAuth client.
  """
  oauthClientUpdate(
    """
    A partial client object to update the OAuth client with.
    """
    input: OauthClientUpdateInput!
    """
    The identifier of the OAuth client to update.
    """
    id: String!
  ): OauthClientPayload!
  """
  Archives an OAuth client.
  """
  oauthClientArchive(
    """
    The identifier of the OAuth client to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Verifies a domain to be added to an organization.
  """
  organizationDomainVerify(
    """
    The organization domain to verify.
    """
    input: OrganizationDomainVerificationInput!
  ): OrganizationDomainPayload!
  """
  Adds a domain to be allowed for an organization.
  """
  organizationDomainCreate(
    """
    The organization domain entry to create.
    """
    input: OrganizationDomainCreateInput!
  ): OrganizationDomainPayload!
  """
  Deletes a domain.
  """
  organizationDomainDelete(
    """
    The identifier of the domain to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new organization invite.
  """
  organizationInviteCreate(
    """
    The organization invite object to create.
    """
    input: OrganizationInviteCreateInput!
  ): OrganizationInvitePayload!
  """
  Re-send an organization invite.
  """
  resentOrganizationInvite(
    """
    The identifier of the organization invite to be re-send.
    """
    id: String!
  ): ArchivePayload!
  """
  Deletes an organization invite.
  """
  organizationInviteDelete(
    """
    The identifier of the organization invite to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new project link.
  """
  projectLinkCreate(
    """
    The project link object to create.
    """
    input: ProjectLinkCreateInput!
  ): ProjectLinkPayload!
  """
  Deletes a project link.
  """
  projectLinkDelete(
    """
    The identifier of the project link to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new project.
  """
  projectCreate(
    """
    The issue object to create.
    """
    input: ProjectCreateInput!
  ): ProjectPayload!
  """
  Updates a project.
  """
  projectUpdate(
    """
    A partial project object to update the project with.
    """
    input: ProjectUpdateInput!
    """
    The identifier of the project to update. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ProjectPayload!
  """
  Archives a project.
  """
  projectArchive(
    """
    The identifier of the project to archive. Also the identifier from the URL is accepted.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a push subscription.
  """
  pushSubscriptionCreate(
    """
    The push subscription to create.
    """
    input: PushSubscriptionCreateInput!
  ): PushSubscriptionPayload!
  """
  Deletes a push subscription.
  """
  pushSubscriptionDelete(
    """
    The identifier of the push subscription to delete.
    """
    id: String!
  ): PushSubscriptionPayload!
  """
  Creates a new reaction.
  """
  reactionCreate(
    """
    The reaction object to create.
    """
    input: ReactionCreateInput!
  ): ReactionPayload!
  """
  Deletes a reaction.
  """
  reactionDelete(
    """
    The identifier of the reaction to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Create CSV export report for the organization.
  """
  createCsvExportReport: CreateCsvExportReportPayload!
  """
  Creates a subscription session. Used internally to integrate with Stripe.
  """
  subscriptionSessionCreate(
    """
    The name of the plan.
    """
    plan: String!
  ): SubscriptionSessionPayload!
  """
  Creates a subscription update session. Used internally to integrate with Stripe.
  """
  subscriptionUpdateSessionCreate: SubscriptionSessionPayload!
  """
  Updates a subscription.
  """
  subscriptionUpdate(
    """
    The properties of the subscription.
    """
    input: SubscriptionUpdateInput!
    """
    The identifier of the subscription.
    """
    id: String!
  ): SubscriptionPayload!
  """
  Upgrades a subscription plan.
  """
  subscriptionUpgrade(
    """
    The subscription type to upgrade to.
    """
    type: String!
    """
    The identifier of the subscription.
    """
    id: String!
  ): SubscriptionPayload!
  """
  Archives a subscription.
  """
  subscriptionArchive(
    """
    The identifier of the subscription to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new team membership.
  """
  teamMembershipCreate(
    """
    The team membership object to create.
    """
    input: TeamMembershipCreateInput!
  ): TeamMembershipPayload!
  """
  Deletes a team membership.
  """
  teamMembershipDelete(
    """
    The identifier of the team membership to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new team. The user who creates the team will automatically be added as a member to the newly created team.
  """
  teamCreate(
    """
    The team id to copy settings from.
    """
    copySettingsFromTeamId: String
    """
    The team object to create.
    """
    input: TeamCreateInput!
  ): TeamPayload!
  """
  Updates a team.
  """
  teamUpdate(
    """
    A partial team object to update the team with.
    """
    input: TeamUpdateInput!
    """
    The identifier of the team to update.
    """
    id: String!
  ): TeamPayload!
  """
  Archives a team.
  """
  teamArchive(
    """
    The identifier of the team to archive.
    """
    id: String!
  ): ArchivePayload!
  """
  Deletes a team.
  """
  teamDelete(
    """
    The identifier of the team to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new template.
  """
  templateCreate(
    """
    The template object to create.
    """
    input: TemplateCreateInput!
  ): TemplatePayload!
  """
  Updates an existing template.
  """
  templateUpdate(
    """
    The properties of the template to update.
    """
    input: TemplateUpdateInput!
    """
    The identifier of the template.
    """
    id: String!
  ): TemplatePayload!
  """
  Deletes a template.
  """
  templateDelete(
    """
    The identifier of the template to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Updates the user's settings.
  """
  userSettingsUpdate(
    """
    A partial notification object to update the settings with.
    """
    input: UserSettingsUpdateInput!
    """
    The identifier of the userSettings to update.
    """
    id: String!
  ): UserSettingsPayload!
  """
  [Deprecated] Updates a user's settings flag.
  """
  userSettingsFlagIncrement(
    """
    Flag to increment.
    """
    flag: String!
  ): UserSettingsFlagPayload!
  """
  Resets user's setting flags.
  """
  userSettingsFlagsReset: UserSettingsFlagsResetPayload!
  """
  Updates a user's settings flag.
  """
  userFlagUpdate(
    """
    Flag operation to perform
    """
    operation: UserFlagUpdateOperation!
    """
    Settings flag to increment.
    """
    flag: UserFlagType!
  ): UserSettingsFlagPayload!
  """
  Subscribes user to changelog newsletter.
  """
  userSubscribeToNewsletter: UserSubscribeToNewsletterPayload!
  """
  Creates a new ViewPreferences object.
  """
  viewPreferencesCreate(
    """
    The ViewPreferences object to create.
    """
    input: ViewPreferencesCreateInput!
  ): ViewPreferencesPayload!
  """
  Updates an existing ViewPreferences object.
  """
  viewPreferencesUpdate(
    """
    The properties of the view preferences.
    """
    input: ViewPreferencesUpdateInput!
    """
    The identifier of the ViewPreferences object.
    """
    id: String!
  ): ViewPreferencesPayload!
  """
  Deletes a ViewPreferences.
  """
  viewPreferencesDelete(
    """
    The identifier of the ViewPreferences to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new webhook.
  """
  webhookCreate(
    """
    The webhook object to create.
    """
    input: WebhookCreateInput!
  ): WebhookPayload!
  """
  Updates an existing Webhook.
  """
  webhookUpdate(
    """
    The properties of the Webhook.
    """
    input: WebhookUpdateInput!
    """
    The identifier of the Webhook.
    """
    id: String!
  ): WebhookPayload!
  """
  Deletes a Webhook.
  """
  webhookDelete(
    """
    The identifier of the Webhook to delete.
    """
    id: String!
  ): ArchivePayload!
  """
  Creates a new state, adding it to the workflow of a team.
  """
  workflowStateCreate(
    """
    The state to create.
    """
    input: WorkflowStateCreateInput!
  ): WorkflowStatePayload!
  """
  Updates a state.
  """
  workflowStateUpdate(
    """
    A partial state object to update.
    """
    input: WorkflowStateUpdateInput!
    """
    The identifier of the state to update.
    """
    id: String!
  ): WorkflowStatePayload!
  """
  Archives a state. Only states with issues that have all been archived can be archived.
  """
  workflowStateArchive(
    """
    The identifier of the state to archive.
    """
    id: String!
  ): ArchivePayload!
}
input UpdateUserInput {
  """
  The name of the user.
  """
  name: String
  """
  The display name of the user.
  """
  displayName: String
  """
  The avatar image URL of the user.
  """
  avatarUrl: String
  """
  Whether the user account is active.
  """
  active: Boolean
  """
  Reason for deactivation.
  """
  disableReason: String
  """
  Whether the user account has admin privileges.
  """
  admin: Boolean
}
type UserPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The user that was created or updated.
  """
  user: User
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type UserAdminPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input UpdateOrganizationInput {
  """
  The name of the organization.
  """
  name: String
  """
  The logo of the organization.
  """
  logoUrl: String
  """
  The URL key of the organization.
  """
  urlKey: String
  """
  How git branches are formatted. If null, default formatting will be used.
  """
  gitBranchFormat: String
  """
  Whether the Git integration linkback messages should be sent for private repositories.
  """
  gitLinkbackMessagesEnabled: Boolean
  """
  Whether the Git integration linkback messages should be sent for public repositories.
  """
  gitPublicLinkbackMessagesEnabled: Boolean
  """
  Whether the organization is using project milestones.
  """
  projectMilestonesEnabled: Boolean
  """
  Linear Preview feature flags
  """
  linearPreviewFlags: JSONObject
}
type OrganizationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization that was created or updated.
  """
  organization: Organization
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type OrganizationDeletePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input DeleteOrganizationInput {
  """
  The deletion code to confirm operation.
  """
  deletionCode: String!
}
type OrganizationAccessPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type OrganizationSamlConfigurePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  Organization's current SAML configuration.
  """
  samlConfiguration: SamlConfiguration!
  """
  Whether SAML is enabled for the organization.
  """
  samlEnabled: Boolean!
}
"""
The integration resource's settings
"""
type SamlConfiguration {
  """
  X.509 Signing Certificate in string form.
  """
  ssoSigningCert: String
  """
  Sign in endpoint URL for the identity provider.
  """
  ssoEndpoint: String
  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String
  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String
  """
  List of allowed email domains for SAML authentication.
  """
  allowedDomains: [String!]
}
input SamlConfigurationInput {
  """
  X.509 Signing Certificate in string form.
  """
  ssoSigningCert: String
  """
  Sign in endpoint URL for the identity provider.
  """
  ssoEndpoint: String
  """
  Binding method for authentication call. Can be either `post` (default) or `redirect`.
  """
  ssoBinding: String
  """
  The algorithm of the Signing Certificate. Can be one of `sha1`, `sha256` (default), or `sha512`.
  """
  ssoSignAlgo: String
  """
  List of allowed email domains for SAML authentication.
  """
  allowedDomains: [String!]
}
input AdminCommandInput {
  """
  Command to perform.
  """
  cmd: String!
  """
  The value of the command.
  """
  value: String
}
type AdminCommandPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input EventCreateInput {
  """
  The category of the event to create.
  """
  category: String!
  """
  The subject of the event.
  """
  subject: String!
  """
  The target identifier of the event.
  """
  targetId: String
  """
  The value of the event.
  """
  value: Float
  """
  Additional data of the event, encoded as JSON.
  """
  data: JSON
}
type EventPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input ApiKeyCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The label for the API key.
  """
  label: String!
  """
  The API key value (format: /^[a-zA-Z0-9]{40}$/).
  """
  key: String!
}
type ApiKeyPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The API key that was created.
  """
  apiKey: ApiKey!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type ArchivePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input EmailUserAccountAuthChallengeInput {
  """
  The email for which to generate the magic login code.
  """
  email: String!
  """
  Whether the login was requested from the desktop app.
  """
  isDesktop: Boolean
  """
  Signup code.
  """
  signupCode: String
}
type EmailUserAccountAuthChallengeResponse {
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  Supported challenge for this user account. Can be either verificationCode or password.
  """
  authType: String!
}
input EmailUserAccountAuthInput {
  """
  The email which to login via the magic login code.
  """
  email: String!
  """
  The magic login code.
  """
  token: String!
  """
  The timezone of the user's browser.
  """
  timezone: String!
  """
  The identifiers of the teams to auto-join.
  """
  teamIdsToJoin: [String!]
}
input GoogleUserAccountAuthInput {
  """
  Code returned from Google's OAuth flow.
  """
  code: String!
  """
  The URI to redirect the user to.
  """
  redirectUri: String
  """
  The timezone of the user's browser.
  """
  timezone: String!
  """
  The identifiers of the teams to auto-join.
  """
  teamIdsToJoin: [String!]
  """
  Signup code.
  """
  signupCode: String
}
input OnboardingCustomerSurvey {
  companyRole: String
  companySize: String
}
input CreateOrganizationInput {
  """
  The name of the organization.
  """
  name: String!
  """
  The URL key of the organization.
  """
  urlKey: String!
  """
  Whether the organization should allow email domain access.
  """
  domainAccess: Boolean
  """
  The timezone of the organization, passed in by client.
  """
  timezone: String
}
type CreateOrJoinOrganizationResponse {
  organization: Organization!
  user: User!
}
input JoinOrganizationInput {
  """
  The identifier of the organization.
  """
  organizationId: String!
}
input BillingEmailUpdateInput {
  """
  The email address to which to send invoices.
  """
  email: String!
}
type BillingEmailPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
  """
  The customer's email address the invoices are sent to.
  """
  email: String
}
input CollaborationDocumentUpdateInput {
  """
  Document identifier.
  """
  issueId: String!
  """
  Client's document version number.
  """
  version: Int!
  """
  New document steps from the client.
  """
  steps: [JSON!]!
  """
  Client identifier.
  """
  clientId: String!
}
input CommentCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The comment content in markdown format.
  """
  body: String
  """
  The comment content as a Prosemirror document.
  """
  bodyData: JSON
  """
  The issue to associate the comment with.
  """
  issueId: String!
}
type CommentPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The comment that was created or updated.
  """
  comment: Comment!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input CommentUpdateInput {
  """
  The comment content.
  """
  body: String
  """
  The comment content as a Prosemirror document.
  """
  bodyData: JSON
}
input ContactCreateInput {
  """
  The type of support contact.
  """
  type: String!
  """
  The message the user sent.
  """
  message: String!
  """
  User's operating system.
  """
  operatingSystem: String
  """
  User's browser information.
  """
  browser: String
  """
  User's device information.
  """
  device: String
  """
  How disappointed the user would be if they could no longer use Linear.
  """
  disappointmentRating: Int
}
type ContactPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input CustomViewCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the custom view.
  """
  name: String!
  """
  The description of the custom view.
  """
  description: String
  """
  The icon of the custom view.
  """
  icon: String
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The id of the team associated with the custom view.
  """
  teamId: String
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean
}
type CustomViewPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The custom view that was created or updated.
  """
  customView: CustomView!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input CustomViewUpdateInput {
  """
  The name of the custom view.
  """
  name: String
  """
  The description of the custom view.
  """
  description: String
  """
  The icon of the custom view.
  """
  icon: String
  """
  The color of the icon of the custom view.
  """
  color: String
  """
  The id of the team associated with the custom view.
  """
  teamId: String
  """
  The filters applied to issues in the custom view.
  """
  filters: JSONObject
  """
  Whether the custom view is shared with everyone in the organization.
  """
  shared: Boolean
}
input CycleCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The custom name of the cycle.
  """
  name: String
  """
  The team to associate the cycle with.
  """
  teamId: String!
  """
  The start date of the cycle.
  """
  startsAt: DateTime!
  """
  The end date of the cycle.
  """
  endsAt: DateTime!
  """
  The completion time of the cycle. If null, the cycle hasn't been completed.
  """
  completedAt: DateTime
}
type CyclePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The Cycle that was created or updated.
  """
  cycle: Cycle
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input CycleUpdateInput {
  """
  The custom name of the cycle.
  """
  name: String
  """
  The start date of the cycle.
  """
  startsAt: DateTime
  """
  The end date of the cycle.
  """
  endsAt: DateTime
  """
  The end date of the cycle.
  """
  completedAt: DateTime
}
type DebugPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input EmailUnsubscribeInput {
  """
  Email type to unsubscribed from.
  """
  type: String!
  """
  The user's email validation token.
  """
  token: String!
  """
  The identifier of the user.
  """
  userId: String!
}
type EmailUnsubscribePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input EmojiCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the custom emoji.
  """
  name: String!
  """
  The URL for the emoji.
  """
  url: String!
}
type EmojiPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The emoji that was created.
  """
  emoji: Emoji!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input FavoriteCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the issue to favorite.
  """
  issueId: String
  """
  The identifier of the project to favorite.
  """
  projectId: String
  """
  The identifier of the project team to favorite.
  """
  projectTeamId: String
  """
  The identifier of the cycle to favorite.
  """
  cycleId: String
  """
  The identifier of the custom view to favorite.
  """
  customViewId: String
  """
  The identifier of the label to favorite.
  """
  labelId: String
  """
  The position of the item in the favorites list.
  """
  sortOrder: Float
}
type FavoritePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The object that was added as a favorite.
  """
  favorite: Favorite!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input FavoriteUpdateInput {
  """
  The position of the item in the favorites list.
  """
  sortOrder: Float
}
input FeedbackCreateInput {
  """
  The feedback the user sent.
  """
  feedback: String!
  """
  How disappointed the user would be if he/she could no longer use Linear.
  """
  disappointmentRating: Float!
}
type FeedbackPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type UploadPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Object describing the file to be uploaded.
  """
  uploadFile: UploadFile
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
"""
Object representing Google Cloud upload policy, plus additional data.
"""
type UploadFile {
  """
  The filename.
  """
  filename: String!
  """
  The content type.
  """
  contentType: String!
  """
  The size of the uploaded file.
  """
  size: Int!
  """
  The signed URL the for the uploaded file. (assigned automatically)
  """
  uploadUrl: String!
  """
  The asset URL for the uploaded file. (assigned automatically)
  """
  assetUrl: String!
  metaData: JSON
  headers: [UploadFileHeader!]!
}
type UploadFileHeader {
  """
  Upload file header key.
  """
  key: String!
  """
  Upload file header value.
  """
  value: String!
}
type ImageUploadFromUrlPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The URL containing the image.
  """
  url: String
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type IntegrationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The integration that was created or updated.
  """
  integration: Integration
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input IssueLabelCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the label.
  """
  name: String!
  """
  The description of the label.
  """
  description: String
  """
  The color of the label.
  """
  color: String
  """
  The team associated with the label.
  """
  teamId: String!
}
type IssueLabelPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The label that was created or updated.
  """
  issueLabel: IssueLabel!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input IssueLabelUpdateInput {
  """
  The name of the label.
  """
  name: String
  """
  The description of the label.
  """
  description: String
  """
  The color of the label.
  """
  color: String
}
input IssueRelationCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The type of relation of the issue to the related issue.
  """
  type: IssueRelationType!
  """
  The identifier of the issue that is related to another issue.
  """
  issueId: String!
  """
  The identifier of the related issue.
  """
  relatedIssueId: String!
}
"""
The type of the issue relation.
"""
enum IssueRelationType {
  blocks
  duplicate
  related
}
type IssueRelationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The issue relation that was created or updated.
  """
  issueRelation: IssueRelation!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input IssueRelationUpdateInput {
  """
  The type of relation of the issue to the related issue.
  """
  type: String
  """
  The identifier of the issue that is related to another issue.
  """
  issueId: String
  """
  The identifier of the related issue.
  """
  relatedIssueId: String
}
input IssueCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The title of the issue.
  """
  title: String!
  """
  The issue description in markdown format.
  """
  description: String
  """
  The issue description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The identifier of the user to assign the issue to.
  """
  assigneeId: String
  """
  The identifier of the parent issue.
  """
  parentId: String
  """
  The priority of the issue.
  """
  priority: Int
  """
  The estimated complexity of the issue.
  """
  estimate: Int
  """
  The identifiers of the users subscribing to this ticket.
  """
  subscriberIds: [String!]
  """
  The identifiers of the issue labels associated with this ticket.
  """
  labelIds: [String!]
  """
  The identifier or key of the team associated with the issue.
  """
  teamId: String!
  """
  The cycle associated with the issue.
  """
  cycleId: String
  """
  The project associated with the issue.
  """
  projectId: String
  """
  The team state of the issue.
  """
  stateId: String
  """
  The position of the issue in its column on the board view.
  """
  boardOrder: Float
  """
  The position of the issue in parent's sub-issue list.
  """
  subIssueSortOrder: Float
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDateScalar
}
type IssuePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The issue that was created or updated.
  """
  issue: Issue
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input IssueUpdateInput {
  """
  The issue title.
  """
  title: String
  """
  The issue description in markdown format.
  """
  description: String
  """
  The issue description as a Prosemirror document.
  """
  descriptionData: JSON
  """
  The identifier of the user to assign the issue to.
  """
  assigneeId: String
  """
  The identifier of the parent issue.
  """
  parentId: String
  """
  The priority of the issue.
  """
  priority: Int
  """
  The estimated complexity of the issue.
  """
  estimate: Int
  """
  The identifiers of the users subscribing to this ticket.
  """
  subscriberIds: [String!]
  """
  The identifiers of the issue labels associated with this ticket.
  """
  labelIds: [String!]
  """
  The identifier or key of the team associated with the issue.
  """
  teamId: String
  """
  The cycle associated with the issue.
  """
  cycleId: String
  """
  The project associated with the issue.
  """
  projectId: String
  """
  The team state of the issue.
  """
  stateId: String
  """
  The position of the issue in its column on the board view.
  """
  boardOrder: Float
  """
  The position of the issue in parent's sub-issue list.
  """
  subIssueSortOrder: Float
  """
  [DEPRECATED] Document version for backwards compatibility.
  """
  documentVersion: Int
  """
  The date at which the issue is due.
  """
  dueDate: TimelessDateScalar
}
input MilestoneCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the milestone.
  """
  name: String!
  """
  The sort order of the milestone.
  """
  sortOrder: Float
}
type MilestonePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The milesteone that was created or updated.
  """
  milestone: Milestone
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input MilestoneUpdateInput {
  """
  The name of the milestone.
  """
  name: String
  """
  The sort order of the milestone.
  """
  sortOrder: Float
}
input NotificationUpdateInput {
  """
  The time when notification was marked as read.
  """
  readAt: DateTime
}
type NotificationPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The notification that was created or updated.
  """
  notification: Notification!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input NotificationSubscriptionCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the team to subscribe to.
  """
  teamId: String
  """
  The identifier of the project to subscribe to.
  """
  projectId: String
}
type NotificationSubscriptionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The notification subscription that was created or updated.
  """
  notificationSubscription: NotificationSubscription!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input OauthClientCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The application's name.
  """
  name: String!
  """
  User facing description of the application.
  """
  description: String
  """
  Name of the developer of the application.
  """
  developer: String!
  """
  Url of the developer (homepage or docs).
  """
  developerUrl: String!
  """
  List of allowed redirect URIs for the application.
  """
  redirectUris: [String!]!
  """
  URL for the app icon.
  """
  imageUrl: String
}
type OauthClientPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The OAuth client application that was created or updated.
  """
  oauthClient: OauthClient!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
"""
OAuth2 client application
"""
type OauthClient implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  OAuth application's client ID.
  """
  clientId: String!
  """
  OAuth application's client name.
  """
  name: String!
  """
  Information about the application.
  """
  description: String!
  """
  Name of the developer.
  """
  developer: String!
  """
  Url of the developer.
  """
  developerUrl: String!
  """
  Image of the application.
  """
  imageUrl: String!
  """
  OAuth application's client secret.
  """
  clientSecret: String!
  """
  List of allowed redirect URIs for the application.
  """
  redirectUris: [String!]!
}
input OauthClientUpdateInput {
  """
  The application's name.
  """
  name: String
  """
  User facing description of the application.
  """
  description: String
  """
  Name of the developer of the application.
  """
  developer: String
  """
  URL of the developer (homepage or docs).
  """
  developerUrl: String
  """
  List of allowed redirect URIs for the application.
  """
  redirectUris: [String!]
  """
  URL for the app icon.
  """
  imageUrl: String
}
input OrganizationDomainVerificationInput {
  """
  The identifier of the domain being verified.
  """
  organizationDomainId: String!
  """
  The verification code sent via email.
  """
  verificationCode: String!
}
type OrganizationDomainPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization domain that was created or updated.
  """
  organizationDomain: OrganizationDomain!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
"""
Defines the use of a domain by an organization.
"""
type OrganizationDomain implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Domain name
  """
  name: String!
  """
  Is this domain verified
  """
  verified: Boolean!
  """
  The user who added the domain.
  """
  creator: User
  """
  E-mail used to verify this domain
  """
  verificationEmail: String
}
input OrganizationDomainCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The domain name to add.
  """
  name: String!
  """
  The email address to which to send the verification code.
  """
  verificationEmail: String!
  """
  Is the domain verified.
  """
  verified: Boolean!
}
input OrganizationInviteCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The email of the invitee.
  """
  email: String!
  """
  The message to send to the invitee.
  """
  message: String
  """
  The teams that the user has been invited to.
  """
  teamIds: [String!]
}
type OrganizationInvitePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The organization invite that was created or updated.
  """
  organizationInvite: OrganizationInvite!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input ProjectLinkCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The URL of the link.
  """
  url: String!
  """
  The label for the link.
  """
  label: String!
  """
  Related project for the link.
  """
  projectId: String!
}
type ProjectLinkPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project that was created or updated.
  """
  projectLink: ProjectLink!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input ProjectCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the project.
  """
  name: String!
  """
  The icon of the project.
  """
  icon: String
  """
  The color of the project.
  """
  color: String
  """
  The state of the project.
  """
  state: String
  """
  The description for the project.
  """
  description: String
  """
  The identifier of the milestone to associate the project with.
  """
  milestoneId: String
  """
  The identifiers of the teams this project is associated with.
  """
  teamIds: [String!]!
  """
  The identifier of the project lead.
  """
  leadId: String
  """
  The identifiers of the members of this project.
  """
  memberIds: [String!]
  """
  The planned target date of the project.
  """
  targetDate: TimelessDateScalar
  """
  The sort order for the project within its milestone.
  """
  sortOrder: Float
}
type ProjectPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The project that was created or updated.
  """
  project: Project
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input ProjectUpdateInput {
  """
  The state of the project.
  """
  state: String
  """
  The name of the project.
  """
  name: String
  """
  The description for the project.
  """
  description: String
  """
  The identifier of the milestone to associate the project with.
  """
  milestoneId: String
  """
  The icon of the project.
  """
  icon: String
  """
  The color of the project.
  """
  color: String
  """
  The identifiers of the teams this project is associated with.
  """
  teamIds: [String!]
  """
  The identifier of the project lead.
  """
  leadId: String
  """
  The identifiers of the members of this project.
  """
  memberIds: [String!]
  """
  The planned target date of the project.
  """
  targetDate: TimelessDateScalar
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean
  """
  Whether to send issue status update notifications to Slack.
  """
  slackIssueStatuses: Boolean
  """
  The sort order for the project within its milestone.
  """
  sortOrder: Float
}
input PushSubscriptionCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The user identifier of the subscription.
  """
  userId: String!
  """
  The data of the subscription in stringified JSON format.
  """
  data: String!
}
input ReactionCreateInput {
  """
  The identifier. If none is provided, the backend will generate one
  """
  id: String
  """
  The emoji the user reacted with.
  """
  emoji: String
  """
  The comment to associate the reaction with.
  """
  commentId: String!
}
type ReactionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  reaction: Reaction!
  success: Boolean!
}
type CreateCsvExportReportPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type SubscriptionSessionPayload {
  """
  The subscription session that was created or updated.
  """
  session: String
}
input SubscriptionUpdateInput {
  """
  The date the subscription was set to cancel, if any.
  """
  canceledAt: DateTime
  """
  The subscription type of a pending change. Null if no change pending.
  """
  pendingChangeType: String
}
type SubscriptionPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The subscription entity being mutated.
  """
  subscription: Subscription!
  """
  The date the subscription was set to cancel at the end of the billing period, if any.
  """
  canceledAt: DateTime
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input TeamMembershipCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The identifier of the user associated with the membership.
  """
  userId: String!
  """
  The identifier of the team associated with the membership.
  """
  teamId: String!
}
type TeamMembershipPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The team membership that was created or updated.
  """
  teamMembership: TeamMembership
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input TeamCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The name of the team.
  """
  name: String!
  """
  The description of the team.
  """
  description: String
  """
  The key of the team. If not given, rc key will be generated based on the name of the team.
  """
  key: String
  """
  The organization associated with the team.
  """
  organizationId: String
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float
  """
  The duration of each cycle in weeks.
  """
  cycleDuration: Int
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Int
  """
  Auto assign started issues to current active cycle setting.
  """
  cycleIssueAutoAssignStarted: Boolean
  """
  Auto assign completed issues to current active cycle setting.
  """
  cycleIssueAutoAssignCompleted: Boolean
  """
  Only allow issues issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float
  """
  The timezone of the team.
  """
  timezone: String
  """
  The issue estimation type to use.
  """
  issueEstimationType: String
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean
  """
  The identifier of the default template for members of this team.
  """
  defaultTemplateForMembersId: String
  """
  The identifier of the default template for non-members of this team.
  """
  defaultTemplateForNonMembersId: String
  """
  Period after which issues are automatically closed, in months.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to.
  """
  autoCloseStateId: String
  """
  Period after which closed and completed issues are automatically archived, in months. 0 means disabled.
  """
  autoArchivePeriod: Float
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
}
type TeamPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The team that was created or updated.
  """
  team: Team
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input TeamUpdateInput {
  """
  The name of the team.
  """
  name: String
  """
  The description of the team.
  """
  description: String
  """
  The key of the team.
  """
  key: String
  """
  Whether the team uses cycles.
  """
  cyclesEnabled: Boolean
  """
  The day of the week that a new cycle starts.
  """
  cycleStartDay: Float
  """
  The duration of each cycle in weeks.
  """
  cycleDuration: Int
  """
  The cooldown time after each cycle in weeks.
  """
  cycleCooldownTime: Int
  """
  Auto assign started issues to current active cycle setting.
  """
  cycleIssueAutoAssignStarted: Boolean
  """
  Auto assign completed issues to current active cycle setting.
  """
  cycleIssueAutoAssignCompleted: Boolean
  """
  Only allow issues with cycles in Active Issues.
  """
  cycleLockToActive: Boolean
  """
  How many upcoming cycles to create.
  """
  upcomingCycleCount: Float
  """
  The timezone of the team.
  """
  timezone: String
  """
  The issue estimation type to use.
  """
  issueEstimationType: String
  """
  Whether to allow zeros in issues estimates.
  """
  issueEstimationAllowZero: Boolean
  """
  Whether to add additional points to the estimate scale.
  """
  issueEstimationExtended: Boolean
  """
  What to use as an default estimate for unestimated issues.
  """
  defaultIssueEstimate: Float
  """
  The workflow state into which issues are moved when a draft PR has been opened.
  """
  draftWorkflowStateId: String
  """
  The workflow state into which issues are moved when a PR has been opened.
  """
  startWorkflowStateId: String
  """
  The workflow state into which issues are moved when a review has been requested for the PR.
  """
  reviewWorkflowStateId: String
  """
  The workflow state into which issues are moved when a PR has been merged.
  """
  mergeWorkflowStateId: String
  """
  Whether to send new issue notifications to Slack.
  """
  slackNewIssue: Boolean
  """
  Whether to send new issue comment notifications to Slack.
  """
  slackIssueComments: Boolean
  """
  Whether to send issue status update notifications to Slack.
  """
  slackIssueStatuses: Boolean
  """
  Whether to group recent issue history entries.
  """
  groupIssueHistory: Boolean
  """
  The identifier of the default template for members of this team.
  """
  defaultTemplateForMembersId: String
  """
  The identifier of the default template for non-members of this team.
  """
  defaultTemplateForNonMembersId: String
  """
  Period after which issues are automatically closed, in months.
  """
  autoClosePeriod: Float
  """
  The canceled workflow state which auto closed issues will be set to.
  """
  autoCloseStateId: String
  """
  Period after which closed and completed issues are automatically archived, in months.
  """
  autoArchivePeriod: Float
  """
  The workflow state into which issues are moved when they are marked as a duplicate of another issue.
  """
  markedAsDuplicateWorkflowStateId: String
}
input TemplateCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The template type, e.g. 'issue'.
  """
  type: String!
  """
  The identifier or key of the team associated with the template.
  """
  teamId: String!
  """
  The template name.
  """
  name: String!
  """
  The template description.
  """
  description: String
  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON!
}
type TemplatePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The template that was created or updated.
  """
  template: Template!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input TemplateUpdateInput {
  """
  The template name.
  """
  name: String
  """
  The template description.
  """
  description: String
  """
  The template data as JSON encoded attributes of the type of entity, such as an issue.
  """
  templateData: JSON
}
input UserSettingsUpdateInput {
  """
  The user's settings.
  """
  settings: String
  """
  The types of emails the user has unsubscribed from.
  """
  unsubscribedFrom: [String!]
  """
  The user's notification preferences.
  """
  notificationPreferences: JSONObject
}
type UserSettingsPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The user's settings.
  """
  userSettings: UserSettings!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type UserSettingsFlagPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The flag key which was updated.
  """
  flag: String!
  """
  The flag value after update.
  """
  value: Int!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
type UserSettingsFlagsResetPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
"""
Operations that can be applied to UserFlagType
"""
enum UserFlagUpdateOperation {
  incr
  decr
  clear
  lock
}
"""
The types of flags that the user can have.
"""
enum UserFlagType {
  completedOnboarding
  desktopInstalled
  desktopDownloadToastDismissed
  emptyBacklogDismissed
  emptyCustomViewsDismissed
  emptyActiveIssuesDismissed
  emptyMyIssuesDismissed
  cycleWelcomeDismissed
  projectWelcomeDismissed
  analyticsWelcomeDismissed
  figmaPromptDismissed
  migrateThemePreference
  listSelectionTip
  clearedAllNotifications
}
type UserSubscribeToNewsletterPayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input ViewPreferencesCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The type of view preferences (either user or organization level preferences).
  """
  type: ViewPreferencesType!
  """
  The view type of the view preferences are associated with.
  """
  viewType: ViewType!
  """
  View preferences object.
  """
  preferences: JSONObject!
  """
  The team these view preferences are associated with.
  """
  teamId: String
  """
  The project these view preferences are associated with.
  """
  projectId: String
  """
  The label these view preferences are associated with.
  """
  labelId: String
  """
  The cycle these view preferences are associated with.
  """
  cycleId: String
  """
  The custom view these view preferences are associated with.
  """
  customViewId: String
}
"""
The type of view preferences (either user or organization level preferences).
"""
enum ViewPreferencesType {
  organization
  user
}
"""
The client view this custom view is targeting.
"""
enum ViewType {
  inbox
  myIssues
  board
  completedCycle
  cycle
  project
  label
  activeIssues
  backlog
  allIssues
  customView
}
type ViewPreferencesPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The view preferences entity being mutated.
  """
  viewPreferences: ViewPreferences!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input ViewPreferencesUpdateInput {
  """
  View preferences.
  """
  preferences: JSONObject!
}
input WebhookCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  Whether this webhook is enabled.
  """
  enabled: Boolean = true
  """
  An optional secret token used to sign the webhook payload.
  """
  secret: String
  """
  The URL that will be called on data changes.
  """
  url: String!
  """
  The identifier or key of the team associated with the Webhook.
  """
  teamId: String!
}
type WebhookPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The webhook entity being mutated.
  """
  webhook: Webhook!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input WebhookUpdateInput {
  """
  An optional secret token used to sign the Webhook payload.
  """
  secret: String
  """
  Whether this webhook is enabled.
  """
  enabled: Boolean
  """
  The URL that will be called on data changes.
  """
  url: String
}
input WorkflowStateCreateInput {
  """
  The identifier. If none is provided, the backend will generate one.
  """
  id: String
  """
  The workflow type.
  """
  type: String!
  """
  The name of the state.
  """
  name: String!
  """
  The color of the state.
  """
  color: String!
  """
  The description of the state.
  """
  description: String
  """
  The position of the state.
  """
  position: Float
  """
  The team associated with the state.
  """
  teamId: String!
}
type WorkflowStatePayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
  """
  The state that was created or updated.
  """
  workflowState: WorkflowState!
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
input WorkflowStateUpdateInput {
  """
  The name of the state.
  """
  name: String
  """
  The color of the state.
  """
  color: String
  """
  The description of the state.
  """
  description: String
  """
  The position of the state.
  """
  position: Float
}
"""
Collaborative editing steps for documents.
"""
type DocumentStep implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
  """
  Step data.
  """
  step: JSON!
  """
  Step version.
  """
  version: Float!
  """
  Connected client ID.
  """
  clientId: String!
}
"""
A user's web browser push notification subscription.
"""
type PushSubscription implements Node {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The time at which the entity was created.
  """
  createdAt: DateTime!
  """
  The last time at which the entity was updated. This is the same as the creation time if the
      entity hasn't been update after creation.
  """
  updatedAt: DateTime!
  """
  The time at which the entity was archived. Null if the entity has not been archived.
  """
  archivedAt: DateTime
}
type PushSubscriptionEdge {
  node: PushSubscription!
  """
  Used in `before` and `after` args
  """
  cursor: String!
}
type PushSubscriptionConnection {
  edges: [PushSubscriptionEdge!]!
  nodes: [PushSubscription!]!
  pageInfo: PageInfo!
}
"""
A user account.
"""
type UserAccount {
  """
  The models identifier.
  """
  id: ID!
  """
  The time at which the model was created.
  """
  createdAt: DateTime!
  """
  The time at which the model was updated.
  """
  updatedAt: DateTime!
  """
  The time at which the model was archived.
  """
  archivedAt: DateTime
  """
  The user's name.
  """
  name: String
  """
  The user's email address.
  """
  email: String!
  """
  The authentication service used to create the account.
  """
  service: String!
  """
  Users belonging to the account.
  """
  users: [User!]!
}
"""
A recorded entry of a file uploaded by a user.
"""
type FileUpload {
  """
  The unique identifier of the entity.
  """
  id: ID!
  """
  The user who uploaded the file.
  """
  creator: User
  """
  The organization the upload belongs to.
  """
  organization: Organization!
  """
  The asset URL this file is available at.
  """
  assetUrl: String
  """
  The MIME type of the uploaded file.
  """
  contentType: String
  """
  The name of the uploaded file.
  """
  filename: String
  """
  Additional metadata of the file.
  """
  metaData: JSON!
  """
  Size of the uploaded file in bytes.
  """
  size: Float!
}
type SynchronizedPayload {
  """
  The identifier of the last sync operation.
  """
  lastSyncId: Float!
}
type OrganizationDomainSimplePayload {
  """
  Whether the operation was successful.
  """
  success: Boolean!
}
